%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.3
-module(p11).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("p11.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type sc_11009() :: #sc_11009{}.
-type cs_11004() :: #cs_11004{}.
-type sc_11101() :: #sc_11101{}.
-type sc_11007() :: #sc_11007{}.
-type cs_11008() :: #cs_11008{}.
-type gamePlayerInfo() :: #gamePlayerInfo{}.
-type sc_11006() :: #sc_11006{}.
-type playerInfo() :: #playerInfo{}.
-type sc_11003() :: #sc_11003{}.
-type cs_11014() :: #cs_11014{}.
-type sc_11008() :: #sc_11008{}.
-type sc_11010() :: #sc_11010{}.
-type sc_11012() :: #sc_11012{}.
-type cs_11002() :: #cs_11002{}.
-type sc_11015() :: #sc_11015{}.
-type cs_11007() :: #cs_11007{}.
-type shootPlayerInfo() :: #shootPlayerInfo{}.
-type sc_11102() :: #sc_11102{}.
-type cs_11012() :: #cs_11012{}.
-type cs_11011() :: #cs_11011{}.
-type cs_11006() :: #cs_11006{}.
-type cs_11102() :: #cs_11102{}.
-type sc_11011() :: #sc_11011{}.
-type cs_11010() :: #cs_11010{}.
-type cs_11101() :: #cs_11101{}.
-type sc_11005() :: #sc_11005{}.
-type cs_11005() :: #cs_11005{}.
-type cs_11015() :: #cs_11015{}.
-type sc_11002() :: #sc_11002{}.
-export_type(['sc_11009'/0, 'cs_11004'/0, 'sc_11101'/0, 'sc_11007'/0, 'cs_11008'/0, 'gamePlayerInfo'/0, 'sc_11006'/0, 'playerInfo'/0, 'sc_11003'/0, 'cs_11014'/0, 'sc_11008'/0, 'sc_11010'/0, 'sc_11012'/0, 'cs_11002'/0, 'sc_11015'/0, 'cs_11007'/0, 'shootPlayerInfo'/0, 'sc_11102'/0, 'cs_11012'/0, 'cs_11011'/0, 'cs_11006'/0, 'cs_11102'/0, 'sc_11011'/0, 'cs_11010'/0, 'cs_11101'/0, 'sc_11005'/0, 'cs_11005'/0, 'cs_11015'/0, 'sc_11002'/0]).

-spec encode_msg(#sc_11009{} | #cs_11004{} | #sc_11101{} | #sc_11007{} | #cs_11008{} | #gamePlayerInfo{} | #sc_11006{} | #playerInfo{} | #sc_11003{} | #cs_11014{} | #sc_11008{} | #sc_11010{} | #sc_11012{} | #cs_11002{} | #sc_11015{} | #cs_11007{} | #shootPlayerInfo{} | #sc_11102{} | #cs_11012{} | #cs_11011{} | #cs_11006{} | #cs_11102{} | #sc_11011{} | #cs_11010{} | #cs_11101{} | #sc_11005{} | #cs_11005{} | #cs_11015{} | #sc_11002{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#sc_11009{} | #cs_11004{} | #sc_11101{} | #sc_11007{} | #cs_11008{} | #gamePlayerInfo{} | #sc_11006{} | #playerInfo{} | #sc_11003{} | #cs_11014{} | #sc_11008{} | #sc_11010{} | #sc_11012{} | #cs_11002{} | #sc_11015{} | #cs_11007{} | #shootPlayerInfo{} | #sc_11102{} | #cs_11012{} | #cs_11011{} | #cs_11006{} | #cs_11102{} | #sc_11011{} | #cs_11010{} | #cs_11101{} | #sc_11005{} | #cs_11005{} | #cs_11015{} | #sc_11002{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #sc_11009{} -> e_msg_sc_11009(Msg, TrUserData);
      #cs_11004{} -> e_msg_cs_11004(Msg, TrUserData);
      #sc_11101{} -> e_msg_sc_11101(Msg, TrUserData);
      #sc_11007{} -> e_msg_sc_11007(Msg, TrUserData);
      #cs_11008{} -> e_msg_cs_11008(Msg, TrUserData);
      #gamePlayerInfo{} ->
	  e_msg_gamePlayerInfo(Msg, TrUserData);
      #sc_11006{} -> e_msg_sc_11006(Msg, TrUserData);
      #playerInfo{} -> e_msg_playerInfo(Msg, TrUserData);
      #sc_11003{} -> e_msg_sc_11003(Msg, TrUserData);
      #cs_11014{} -> e_msg_cs_11014(Msg, TrUserData);
      #sc_11008{} -> e_msg_sc_11008(Msg, TrUserData);
      #sc_11010{} -> e_msg_sc_11010(Msg, TrUserData);
      #sc_11012{} -> e_msg_sc_11012(Msg, TrUserData);
      #cs_11002{} -> e_msg_cs_11002(Msg, TrUserData);
      #sc_11015{} -> e_msg_sc_11015(Msg, TrUserData);
      #cs_11007{} -> e_msg_cs_11007(Msg, TrUserData);
      #shootPlayerInfo{} ->
	  e_msg_shootPlayerInfo(Msg, TrUserData);
      #sc_11102{} -> e_msg_sc_11102(Msg, TrUserData);
      #cs_11012{} -> e_msg_cs_11012(Msg, TrUserData);
      #cs_11011{} -> e_msg_cs_11011(Msg, TrUserData);
      #cs_11006{} -> e_msg_cs_11006(Msg, TrUserData);
      #cs_11102{} -> e_msg_cs_11102(Msg, TrUserData);
      #sc_11011{} -> e_msg_sc_11011(Msg, TrUserData);
      #cs_11010{} -> e_msg_cs_11010(Msg, TrUserData);
      #cs_11101{} -> e_msg_cs_11101(Msg, TrUserData);
      #sc_11005{} -> e_msg_sc_11005(Msg, TrUserData);
      #cs_11005{} -> e_msg_cs_11005(Msg, TrUserData);
      #cs_11015{} -> e_msg_cs_11015(Msg, TrUserData);
      #sc_11002{} -> e_msg_sc_11002(Msg, TrUserData)
    end.



e_msg_sc_11009(Msg, TrUserData) ->
    e_msg_sc_11009(Msg, <<>>, TrUserData).


e_msg_sc_11009(#sc_11009{playerId = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_cs_11004(_Msg, _TrUserData) -> <<>>.

e_msg_sc_11101(Msg, TrUserData) ->
    e_msg_sc_11101(Msg, <<>>, TrUserData).


e_msg_sc_11101(#sc_11101{result = F1, round = F2,
			 playerId = F3, shootData = F4},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_int64(TrF3, <<B2/binary, 24>>)
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_type_bytes(TrF4, <<B3/binary, 34>>)
	   end
    end.

e_msg_sc_11007(Msg, TrUserData) ->
    e_msg_sc_11007(Msg, <<>>, TrUserData).


e_msg_sc_11007(#sc_11007{result = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_cs_11008(_Msg, _TrUserData) -> <<>>.

e_msg_gamePlayerInfo(Msg, TrUserData) ->
    e_msg_gamePlayerInfo(Msg, <<>>, TrUserData).


e_msg_gamePlayerInfo(#gamePlayerInfo{playerId = F1,
				     score = F2, gameInfo = F3},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int64(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_bytes(TrF3, <<B2/binary, 26>>)
    end.

e_msg_sc_11006(Msg, TrUserData) ->
    e_msg_sc_11006(Msg, <<>>, TrUserData).


e_msg_sc_11006(#sc_11006{infos = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_sc_11006_infos(TrF1, Bin, TrUserData)
      end
    end.

e_msg_playerInfo(Msg, TrUserData) ->
    e_msg_playerInfo(Msg, <<>>, TrUserData).


e_msg_playerInfo(#playerInfo{playerId = F1, openId = F2,
			     nickname = F3, avatarUrl = F4, gender = F5,
			     isRobot = F6, battleTimes = F7},
		 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int64(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_string(TrF5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_int32(TrF6, <<B5/binary, 48>>)
		end
	 end,
    if F7 == undefined -> B6;
       true ->
	   begin
	     TrF7 = id(F7, TrUserData),
	     e_type_int32(TrF7, <<B6/binary, 56>>)
	   end
    end.

e_msg_sc_11003(Msg, TrUserData) ->
    e_msg_sc_11003(Msg, <<>>, TrUserData).


e_msg_sc_11003(#sc_11003{readyTime = F1,
			 playerInfos = F2, seeds = F3},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  e_field_sc_11003_playerInfos(TrF2, B1, TrUserData)
	   end
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true -> e_field_sc_11003_seeds(TrF3, B2, TrUserData)
      end
    end.

e_msg_cs_11014(Msg, TrUserData) ->
    e_msg_cs_11014(Msg, <<>>, TrUserData).


e_msg_cs_11014(#cs_11014{openId = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_cs_11014_openId(TrF1, Bin, TrUserData)
      end
    end.

e_msg_sc_11008(Msg, TrUserData) ->
    e_msg_sc_11008(Msg, <<>>, TrUserData).


e_msg_sc_11008(#sc_11008{topScore = F1, weekScore = F2},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>)
    end.

e_msg_sc_11010(Msg, TrUserData) ->
    e_msg_sc_11010(Msg, <<>>, TrUserData).


e_msg_sc_11010(#sc_11010{playerId = F1,
			 processData = F2},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int64(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bytes(TrF2, <<B1/binary, 18>>)
    end.

e_msg_sc_11012(Msg, TrUserData) ->
    e_msg_sc_11012(Msg, <<>>, TrUserData).


e_msg_sc_11012(#sc_11012{result = F1, winPlayerId = F2,
			 friendRank = F3, rank = F4, reason = F5},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int64(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_int32(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_int32(TrF4, <<B3/binary, 32>>)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_type_int32(TrF5, <<B4/binary, 40>>)
	   end
    end.

e_msg_cs_11002(_Msg, _TrUserData) -> <<>>.

e_msg_sc_11015(Msg, TrUserData) ->
    e_msg_sc_11015(Msg, <<>>, TrUserData).


e_msg_sc_11015(#sc_11015{time = F1, millisecond = F2},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int64(TrF2, <<B1/binary, 16>>)
    end.

e_msg_cs_11007(_Msg, _TrUserData) -> <<>>.

e_msg_shootPlayerInfo(Msg, TrUserData) ->
    e_msg_shootPlayerInfo(Msg, <<>>, TrUserData).


e_msg_shootPlayerInfo(#shootPlayerInfo{playerId = F1,
				       score = F2},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int64(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>)
    end.

e_msg_sc_11102(Msg, TrUserData) ->
    e_msg_sc_11102(Msg, <<>>, TrUserData).


e_msg_sc_11102(#sc_11102{result = F1, round = F2,
			 scoreInfos = F3, data = F4},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  e_field_sc_11102_scoreInfos(TrF3, B2, TrUserData)
	   end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_type_bytes(TrF4, <<B3/binary, 34>>)
	   end
    end.

e_msg_cs_11012(Msg, TrUserData) ->
    e_msg_cs_11012(Msg, <<>>, TrUserData).


e_msg_cs_11012(#cs_11012{winPlayerId = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int64(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_cs_11011(Msg, TrUserData) ->
    e_msg_cs_11011(Msg, <<>>, TrUserData).


e_msg_cs_11011(#cs_11011{score = F1, resultData = F2},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bytes(TrF2, <<B1/binary, 18>>)
    end.

e_msg_cs_11006(_Msg, _TrUserData) -> <<>>.

e_msg_cs_11102(Msg, TrUserData) ->
    e_msg_cs_11102(Msg, <<>>, TrUserData).


e_msg_cs_11102(#cs_11102{round = F1, addScore = F2,
			 data = F3},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_bytes(TrF3, <<B2/binary, 26>>)
	   end
    end.

e_msg_sc_11011(Msg, TrUserData) ->
    e_msg_sc_11011(Msg, <<>>, TrUserData).


e_msg_sc_11011(#sc_11011{playerId = F1, score = F2,
			 resultData = F3},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int64(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_bytes(TrF3, <<B2/binary, 26>>)
    end.

e_msg_cs_11010(Msg, TrUserData) ->
    e_msg_cs_11010(Msg, <<>>, TrUserData).


e_msg_cs_11010(#cs_11010{processData = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bytes(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_cs_11101(Msg, TrUserData) ->
    e_msg_cs_11101(Msg, <<>>, TrUserData).


e_msg_cs_11101(#cs_11101{round = F1, shootData = F2},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bytes(TrF2, <<B1/binary, 18>>)
    end.

e_msg_sc_11005(Msg, TrUserData) ->
    e_msg_sc_11005(Msg, <<>>, TrUserData).


e_msg_sc_11005(#sc_11005{gameState = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_cs_11005(_Msg, _TrUserData) -> <<>>.

e_msg_cs_11015(_Msg, _TrUserData) -> <<>>.

e_msg_sc_11002(Msg, TrUserData) ->
    e_msg_sc_11002(Msg, <<>>, TrUserData).


e_msg_sc_11002(#sc_11002{result = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_mfield_sc_11006_infos(Msg, Bin, TrUserData) ->
    SubBin = e_msg_gamePlayerInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_sc_11006_infos([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_sc_11006_infos(id(Elem, TrUserData),
				   Bin2, TrUserData),
    e_field_sc_11006_infos(Rest, Bin3, TrUserData);
e_field_sc_11006_infos([], Bin, _TrUserData) -> Bin.

e_mfield_sc_11003_playerInfos(Msg, Bin, TrUserData) ->
    SubBin = e_msg_playerInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_sc_11003_playerInfos([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_sc_11003_playerInfos(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_sc_11003_playerInfos(Rest, Bin3, TrUserData);
e_field_sc_11003_playerInfos([], Bin, _TrUserData) ->
    Bin.

e_field_sc_11003_seeds([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 24>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2),
    e_field_sc_11003_seeds(Rest, Bin3, TrUserData);
e_field_sc_11003_seeds([], Bin, _TrUserData) -> Bin.

e_field_cs_11014_openId([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_cs_11014_openId(Rest, Bin3, TrUserData);
e_field_cs_11014_openId([], Bin, _TrUserData) -> Bin.

e_mfield_sc_11102_scoreInfos(Msg, Bin, TrUserData) ->
    SubBin = e_msg_shootPlayerInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_sc_11102_scoreInfos([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_sc_11102_scoreInfos(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_sc_11102_scoreInfos(Rest, Bin3, TrUserData);
e_field_sc_11102_scoreInfos([], Bin, _TrUserData) ->
    Bin.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      sc_11009 ->
	  try d_msg_sc_11009(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_11009, {Class, Reason, StackTrace}}}})
	  end;
      cs_11004 ->
	  try d_msg_cs_11004(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_11004, {Class, Reason, StackTrace}}}})
	  end;
      sc_11101 ->
	  try d_msg_sc_11101(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_11101, {Class, Reason, StackTrace}}}})
	  end;
      sc_11007 ->
	  try d_msg_sc_11007(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_11007, {Class, Reason, StackTrace}}}})
	  end;
      cs_11008 ->
	  try d_msg_cs_11008(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_11008, {Class, Reason, StackTrace}}}})
	  end;
      gamePlayerInfo ->
	  try d_msg_gamePlayerInfo(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, gamePlayerInfo, {Class, Reason, StackTrace}}}})
	  end;
      sc_11006 ->
	  try d_msg_sc_11006(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_11006, {Class, Reason, StackTrace}}}})
	  end;
      playerInfo ->
	  try d_msg_playerInfo(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, playerInfo, {Class, Reason, StackTrace}}}})
	  end;
      sc_11003 ->
	  try d_msg_sc_11003(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_11003, {Class, Reason, StackTrace}}}})
	  end;
      cs_11014 ->
	  try d_msg_cs_11014(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_11014, {Class, Reason, StackTrace}}}})
	  end;
      sc_11008 ->
	  try d_msg_sc_11008(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_11008, {Class, Reason, StackTrace}}}})
	  end;
      sc_11010 ->
	  try d_msg_sc_11010(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_11010, {Class, Reason, StackTrace}}}})
	  end;
      sc_11012 ->
	  try d_msg_sc_11012(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_11012, {Class, Reason, StackTrace}}}})
	  end;
      cs_11002 ->
	  try d_msg_cs_11002(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_11002, {Class, Reason, StackTrace}}}})
	  end;
      sc_11015 ->
	  try d_msg_sc_11015(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_11015, {Class, Reason, StackTrace}}}})
	  end;
      cs_11007 ->
	  try d_msg_cs_11007(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_11007, {Class, Reason, StackTrace}}}})
	  end;
      shootPlayerInfo ->
	  try d_msg_shootPlayerInfo(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, shootPlayerInfo, {Class, Reason, StackTrace}}}})
	  end;
      sc_11102 ->
	  try d_msg_sc_11102(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_11102, {Class, Reason, StackTrace}}}})
	  end;
      cs_11012 ->
	  try d_msg_cs_11012(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_11012, {Class, Reason, StackTrace}}}})
	  end;
      cs_11011 ->
	  try d_msg_cs_11011(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_11011, {Class, Reason, StackTrace}}}})
	  end;
      cs_11006 ->
	  try d_msg_cs_11006(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_11006, {Class, Reason, StackTrace}}}})
	  end;
      cs_11102 ->
	  try d_msg_cs_11102(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_11102, {Class, Reason, StackTrace}}}})
	  end;
      sc_11011 ->
	  try d_msg_sc_11011(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_11011, {Class, Reason, StackTrace}}}})
	  end;
      cs_11010 ->
	  try d_msg_cs_11010(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_11010, {Class, Reason, StackTrace}}}})
	  end;
      cs_11101 ->
	  try d_msg_cs_11101(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_11101, {Class, Reason, StackTrace}}}})
	  end;
      sc_11005 ->
	  try d_msg_sc_11005(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_11005, {Class, Reason, StackTrace}}}})
	  end;
      cs_11005 ->
	  try d_msg_cs_11005(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_11005, {Class, Reason, StackTrace}}}})
	  end;
      cs_11015 ->
	  try d_msg_cs_11015(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_11015, {Class, Reason, StackTrace}}}})
	  end;
      sc_11002 ->
	  try d_msg_sc_11002(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_11002, {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_sc_11009(Bin, TrUserData) ->
    dfp_read_field_def_sc_11009(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_11009(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_sc_11009_playerId(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_sc_11009(<<>>, 0, 0, F@_1, _) ->
    #sc_11009{playerId = F@_1};
dfp_read_field_def_sc_11009(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_sc_11009(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_sc_11009(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_11009(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_sc_11009(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_11009_playerId(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_sc_11009(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_sc_11009(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_sc_11009(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_sc_11009(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_sc_11009(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_sc_11009(<<>>, 0, 0, F@_1, _) ->
    #sc_11009{playerId = F@_1}.

d_field_sc_11009_playerId(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_sc_11009_playerId(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_sc_11009_playerId(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11009(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_sc_11009(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_sc_11009(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_sc_11009(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_sc_11009(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_sc_11009(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_11009(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_sc_11009(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_11009(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_sc_11009(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_11009(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_sc_11009(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_sc_11009(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_sc_11009(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_sc_11009(Rest, Z1, Z2, F@_1,
				TrUserData).

d_msg_cs_11004(Bin, TrUserData) ->
    dfp_read_field_def_cs_11004(Bin, 0, 0, TrUserData).

dfp_read_field_def_cs_11004(<<>>, 0, 0, _) ->
    #cs_11004{};
dfp_read_field_def_cs_11004(Other, Z1, Z2,
			    TrUserData) ->
    dg_read_field_def_cs_11004(Other, Z1, Z2, TrUserData).

dg_read_field_def_cs_11004(<<1:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_11004(Rest, N + 7, X bsl N + Acc,
			       TrUserData);
dg_read_field_def_cs_11004(<<0:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_cs_11004(Rest, 0, 0, TrUserData);
      1 -> skip_64_cs_11004(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_cs_11004(Rest, 0, 0, TrUserData);
      3 ->
	  skip_group_cs_11004(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_cs_11004(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_cs_11004(<<>>, 0, 0, _) ->
    #cs_11004{}.

skip_varint_cs_11004(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    skip_varint_cs_11004(Rest, Z1, Z2, TrUserData);
skip_varint_cs_11004(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_cs_11004(Rest, Z1, Z2, TrUserData).

skip_length_delimited_cs_11004(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_11004(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
skip_length_delimited_cs_11004(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_11004(Rest2, 0, 0, TrUserData).

skip_group_cs_11004(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_11004(Rest, 0, Z2, TrUserData).

skip_32_cs_11004(<<_:32, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_11004(Rest, Z1, Z2, TrUserData).

skip_64_cs_11004(<<_:64, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_11004(Rest, Z1, Z2, TrUserData).

d_msg_sc_11101(Bin, TrUserData) ->
    dfp_read_field_def_sc_11101(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_11101(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_sc_11101_result(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_sc_11101(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_sc_11101_round(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
dfp_read_field_def_sc_11101(<<24, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_sc_11101_playerId(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_sc_11101(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_sc_11101_shootData(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_sc_11101(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, _) ->
    #sc_11101{result = F@_1, round = F@_2, playerId = F@_3,
	      shootData = F@_4};
dfp_read_field_def_sc_11101(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, TrUserData) ->
    dg_read_field_def_sc_11101(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

dg_read_field_def_sc_11101(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_11101(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_sc_11101(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_11101_result(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      16 ->
	  d_field_sc_11101_round(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, TrUserData);
      24 ->
	  d_field_sc_11101_playerId(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      34 ->
	  d_field_sc_11101_shootData(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_sc_11101(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
	    1 ->
		skip_64_sc_11101(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 TrUserData);
	    2 ->
		skip_length_delimited_sc_11101(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_sc_11101(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_sc_11101(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 TrUserData)
	  end
    end;
dg_read_field_def_sc_11101(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, _) ->
    #sc_11101{result = F@_1, round = F@_2, playerId = F@_3,
	      shootData = F@_4}.

d_field_sc_11101_result(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_sc_11101_result(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_sc_11101_result(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11101(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, TrUserData).

d_field_sc_11101_round(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_sc_11101_round(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, TrUserData);
d_field_sc_11101_round(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11101(RestF, 0, 0, F@_1,
				NewFValue, F@_3, F@_4, TrUserData).

d_field_sc_11101_playerId(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_sc_11101_playerId(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_sc_11101_playerId(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11101(RestF, 0, 0, F@_1, F@_2,
				NewFValue, F@_4, TrUserData).

d_field_sc_11101_shootData(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_sc_11101_shootData(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_sc_11101_shootData(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_sc_11101(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, TrUserData).

skip_varint_sc_11101(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_sc_11101(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
skip_varint_sc_11101(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_sc_11101(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_length_delimited_sc_11101(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_11101(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
skip_length_delimited_sc_11101(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_11101(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_group_sc_11101(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_11101(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_32_sc_11101(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_sc_11101(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_64_sc_11101(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_sc_11101(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

d_msg_sc_11007(Bin, TrUserData) ->
    dfp_read_field_def_sc_11007(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_11007(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_sc_11007_result(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_sc_11007(<<>>, 0, 0, F@_1, _) ->
    #sc_11007{result = F@_1};
dfp_read_field_def_sc_11007(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_sc_11007(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_sc_11007(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_11007(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_sc_11007(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_11007_result(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_sc_11007(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_sc_11007(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_sc_11007(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_sc_11007(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_sc_11007(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_sc_11007(<<>>, 0, 0, F@_1, _) ->
    #sc_11007{result = F@_1}.

d_field_sc_11007_result(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_sc_11007_result(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_sc_11007_result(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11007(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_sc_11007(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_sc_11007(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_sc_11007(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_sc_11007(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_sc_11007(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_11007(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_sc_11007(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_11007(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_sc_11007(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_11007(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_sc_11007(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_sc_11007(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_sc_11007(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_sc_11007(Rest, Z1, Z2, F@_1,
				TrUserData).

d_msg_cs_11008(Bin, TrUserData) ->
    dfp_read_field_def_cs_11008(Bin, 0, 0, TrUserData).

dfp_read_field_def_cs_11008(<<>>, 0, 0, _) ->
    #cs_11008{};
dfp_read_field_def_cs_11008(Other, Z1, Z2,
			    TrUserData) ->
    dg_read_field_def_cs_11008(Other, Z1, Z2, TrUserData).

dg_read_field_def_cs_11008(<<1:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_11008(Rest, N + 7, X bsl N + Acc,
			       TrUserData);
dg_read_field_def_cs_11008(<<0:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_cs_11008(Rest, 0, 0, TrUserData);
      1 -> skip_64_cs_11008(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_cs_11008(Rest, 0, 0, TrUserData);
      3 ->
	  skip_group_cs_11008(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_cs_11008(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_cs_11008(<<>>, 0, 0, _) ->
    #cs_11008{}.

skip_varint_cs_11008(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    skip_varint_cs_11008(Rest, Z1, Z2, TrUserData);
skip_varint_cs_11008(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_cs_11008(Rest, Z1, Z2, TrUserData).

skip_length_delimited_cs_11008(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_11008(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
skip_length_delimited_cs_11008(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_11008(Rest2, 0, 0, TrUserData).

skip_group_cs_11008(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_11008(Rest, 0, Z2, TrUserData).

skip_32_cs_11008(<<_:32, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_11008(Rest, Z1, Z2, TrUserData).

skip_64_cs_11008(<<_:64, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_11008(Rest, Z1, Z2, TrUserData).

d_msg_gamePlayerInfo(Bin, TrUserData) ->
    dfp_read_field_def_gamePlayerInfo(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_gamePlayerInfo(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_gamePlayerInfo_playerId(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_gamePlayerInfo(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_gamePlayerInfo_score(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_gamePlayerInfo(<<26, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_gamePlayerInfo_gameInfo(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_gamePlayerInfo(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, _) ->
    #gamePlayerInfo{playerId = F@_1, score = F@_2,
		    gameInfo = F@_3};
dfp_read_field_def_gamePlayerInfo(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, TrUserData) ->
    dg_read_field_def_gamePlayerInfo(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

dg_read_field_def_gamePlayerInfo(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gamePlayerInfo(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
dg_read_field_def_gamePlayerInfo(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_gamePlayerInfo_playerId(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      16 ->
	  d_field_gamePlayerInfo_score(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      26 ->
	  d_field_gamePlayerInfo_gameInfo(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_gamePlayerInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    1 ->
		skip_64_gamePlayerInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    2 ->
		skip_length_delimited_gamePlayerInfo(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_gamePlayerInfo(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_gamePlayerInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData)
	  end
    end;
dg_read_field_def_gamePlayerInfo(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, _) ->
    #gamePlayerInfo{playerId = F@_1, score = F@_2,
		    gameInfo = F@_3}.

d_field_gamePlayerInfo_playerId(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_gamePlayerInfo_playerId(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_gamePlayerInfo_playerId(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_gamePlayerInfo(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, TrUserData).

d_field_gamePlayerInfo_score(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_gamePlayerInfo_score(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_gamePlayerInfo_score(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_gamePlayerInfo(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, TrUserData).

d_field_gamePlayerInfo_gameInfo(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_gamePlayerInfo_gameInfo(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_gamePlayerInfo_gameInfo(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_gamePlayerInfo(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, TrUserData).

skip_varint_gamePlayerInfo(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_gamePlayerInfo(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
skip_varint_gamePlayerInfo(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_gamePlayerInfo(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_length_delimited_gamePlayerInfo(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_gamePlayerInfo(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
skip_length_delimited_gamePlayerInfo(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gamePlayerInfo(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, TrUserData).

skip_group_gamePlayerInfo(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gamePlayerInfo(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_32_gamePlayerInfo(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_gamePlayerInfo(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_64_gamePlayerInfo(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_gamePlayerInfo(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

d_msg_sc_11006(Bin, TrUserData) ->
    dfp_read_field_def_sc_11006(Bin, 0, 0,
				id([], TrUserData), TrUserData).

dfp_read_field_def_sc_11006(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_sc_11006_infos(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_sc_11006(<<>>, 0, 0, R1,
			    TrUserData) ->
    #sc_11006{infos = lists_reverse(R1, TrUserData)};
dfp_read_field_def_sc_11006(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_sc_11006(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_sc_11006(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_11006(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_sc_11006(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_sc_11006_infos(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_sc_11006(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_sc_11006(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_sc_11006(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_sc_11006(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_sc_11006(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_sc_11006(<<>>, 0, 0, R1,
			   TrUserData) ->
    #sc_11006{infos = lists_reverse(R1, TrUserData)}.

d_field_sc_11006_infos(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_sc_11006_infos(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
d_field_sc_11006_infos(<<0:1, X:7, Rest/binary>>, N,
		       Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_gamePlayerInfo(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_sc_11006(RestF, 0, 0,
				cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_sc_11006(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_sc_11006(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_sc_11006(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_sc_11006(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_sc_11006(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_11006(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_sc_11006(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_11006(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_sc_11006(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_11006(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_sc_11006(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_sc_11006(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_sc_11006(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_sc_11006(Rest, Z1, Z2, F@_1,
				TrUserData).

d_msg_playerInfo(Bin, TrUserData) ->
    dfp_read_field_def_playerInfo(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_playerInfo(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    d_field_playerInfo_playerId(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_playerInfo(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    d_field_playerInfo_openId(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_playerInfo(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    d_field_playerInfo_nickname(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_playerInfo(<<34, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    d_field_playerInfo_avatarUrl(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_playerInfo(<<42, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    d_field_playerInfo_gender(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_playerInfo(<<48, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    d_field_playerInfo_isRobot(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_playerInfo(<<56, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    d_field_playerInfo_battleTimes(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_playerInfo(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #playerInfo{playerId = F@_1, openId = F@_2,
		nickname = F@_3, avatarUrl = F@_4, gender = F@_5,
		isRobot = F@_6, battleTimes = F@_7};
dfp_read_field_def_playerInfo(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_playerInfo(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_playerInfo(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_playerInfo(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData);
dg_read_field_def_playerInfo(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_playerInfo_playerId(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
      18 ->
	  d_field_playerInfo_openId(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, TrUserData);
      26 ->
	  d_field_playerInfo_nickname(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
      34 ->
	  d_field_playerInfo_avatarUrl(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7,
				       TrUserData);
      42 ->
	  d_field_playerInfo_gender(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, TrUserData);
      48 ->
	  d_field_playerInfo_isRobot(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, TrUserData);
      56 ->
	  d_field_playerInfo_battleTimes(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_playerInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_playerInfo(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_playerInfo(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, F@_6, F@_7,
						 TrUserData);
	    3 ->
		skip_group_playerInfo(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_playerInfo(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_playerInfo(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #playerInfo{playerId = F@_1, openId = F@_2,
		nickname = F@_3, avatarUrl = F@_4, gender = F@_5,
		isRobot = F@_6, battleTimes = F@_7}.

d_field_playerInfo_playerId(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData)
    when N < 57 ->
    d_field_playerInfo_playerId(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData);
d_field_playerInfo_playerId(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_playerInfo(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				  TrUserData).

d_field_playerInfo_openId(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 57 ->
    d_field_playerInfo_openId(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
d_field_playerInfo_openId(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_playerInfo(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				  TrUserData).

d_field_playerInfo_nickname(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData)
    when N < 57 ->
    d_field_playerInfo_nickname(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData);
d_field_playerInfo_nickname(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_playerInfo(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, F@_5, F@_6, F@_7,
				  TrUserData).

d_field_playerInfo_avatarUrl(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData)
    when N < 57 ->
    d_field_playerInfo_avatarUrl(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData);
d_field_playerInfo_avatarUrl(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_playerInfo(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, F@_5, F@_6, F@_7,
				  TrUserData).

d_field_playerInfo_gender(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 57 ->
    d_field_playerInfo_gender(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
d_field_playerInfo_gender(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
			  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_playerInfo(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, NewFValue, F@_6, F@_7,
				  TrUserData).

d_field_playerInfo_isRobot(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData)
    when N < 57 ->
    d_field_playerInfo_isRobot(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData);
d_field_playerInfo_isRobot(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
			   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_playerInfo(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, NewFValue, F@_7,
				  TrUserData).

d_field_playerInfo_battleTimes(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData)
    when N < 57 ->
    d_field_playerInfo_battleTimes(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, TrUserData);
d_field_playerInfo_battleTimes(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
			       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_playerInfo(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, NewFValue,
				  TrUserData).

skip_varint_playerInfo(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData) ->
    skip_varint_playerInfo(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_playerInfo(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData) ->
    dfp_read_field_def_playerInfo(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_playerInfo(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_playerInfo(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_playerInfo(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_playerInfo(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_playerInfo(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_playerInfo(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_playerInfo(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_playerInfo(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_playerInfo(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_playerInfo(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_msg_sc_11003(Bin, TrUserData) ->
    dfp_read_field_def_sc_11003(Bin, 0, 0,
				id(undefined, TrUserData), id([], TrUserData),
				id([], TrUserData), TrUserData).

dfp_read_field_def_sc_11003(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_sc_11003_readyTime(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_sc_11003(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_sc_11003_playerInfos(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_sc_11003(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_pfield_sc_11003_seeds(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_sc_11003(<<24, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_sc_11003_seeds(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_sc_11003(<<>>, 0, 0, F@_1, R1, R2,
			    TrUserData) ->
    #sc_11003{readyTime = F@_1,
	      playerInfos = lists_reverse(R1, TrUserData),
	      seeds = lists_reverse(R2, TrUserData)};
dfp_read_field_def_sc_11003(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_sc_11003(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_sc_11003(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_11003(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_sc_11003(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_11003_readyTime(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      18 ->
	  d_field_sc_11003_playerInfos(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      26 ->
	  d_pfield_sc_11003_seeds(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      24 ->
	  d_field_sc_11003_seeds(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_sc_11003(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_sc_11003(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_sc_11003(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_sc_11003(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_sc_11003(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_sc_11003(<<>>, 0, 0, F@_1, R1, R2,
			   TrUserData) ->
    #sc_11003{readyTime = F@_1,
	      playerInfos = lists_reverse(R1, TrUserData),
	      seeds = lists_reverse(R2, TrUserData)}.

d_field_sc_11003_readyTime(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_sc_11003_readyTime(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_sc_11003_readyTime(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11003(RestF, 0, 0, NewFValue,
				F@_2, F@_3, TrUserData).

d_field_sc_11003_playerInfos(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_sc_11003_playerInfos(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_sc_11003_playerInfos(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_playerInfo(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_sc_11003(RestF, 0, 0, F@_1,
				cons(NewFValue, Prev, TrUserData), F@_3,
				TrUserData).

d_field_sc_11003_seeds(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_sc_11003_seeds(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_sc_11003_seeds(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11003(RestF, 0, 0, F@_1, F@_2,
				cons(NewFValue, Prev, TrUserData), TrUserData).

d_pfield_sc_11003_seeds(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_pfield_sc_11003_seeds(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_pfield_sc_11003_seeds(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_sc_11003_seeds(PackedBytes, 0,
					   0, E),
    dfp_read_field_def_sc_11003(Rest2, 0, 0, F@_1, F@_2,
				NewSeq, TrUserData).

d_packed_field_sc_11003_seeds(<<1:1, X:7, Rest/binary>>,
			      N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_sc_11003_seeds(Rest, N + 7,
				  X bsl N + Acc, AccSeq);
d_packed_field_sc_11003_seeds(<<0:1, X:7, Rest/binary>>,
			      N, Acc, AccSeq) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    d_packed_field_sc_11003_seeds(RestF, 0, 0,
				  [NewFValue | AccSeq]);
d_packed_field_sc_11003_seeds(<<>>, 0, 0, AccSeq) ->
    AccSeq.

skip_varint_sc_11003(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_sc_11003(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_sc_11003(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_sc_11003(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_sc_11003(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_11003(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_sc_11003(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_11003(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_sc_11003(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_11003(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_sc_11003(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_sc_11003(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_sc_11003(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_sc_11003(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

d_msg_cs_11014(Bin, TrUserData) ->
    dfp_read_field_def_cs_11014(Bin, 0, 0,
				id([], TrUserData), TrUserData).

dfp_read_field_def_cs_11014(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_cs_11014_openId(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_cs_11014(<<>>, 0, 0, R1,
			    TrUserData) ->
    #cs_11014{openId = lists_reverse(R1, TrUserData)};
dfp_read_field_def_cs_11014(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_cs_11014(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_cs_11014(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_11014(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_cs_11014(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_cs_11014_openId(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_cs_11014(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_cs_11014(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_cs_11014(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_cs_11014(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_cs_11014(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_cs_11014(<<>>, 0, 0, R1,
			   TrUserData) ->
    #cs_11014{openId = lists_reverse(R1, TrUserData)}.

d_field_cs_11014_openId(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_cs_11014_openId(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_cs_11014_openId(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_cs_11014(RestF, 0, 0,
				cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_cs_11014(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_cs_11014(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_cs_11014(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_cs_11014(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_cs_11014(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_11014(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_cs_11014(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_11014(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_cs_11014(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_11014(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_cs_11014(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_cs_11014(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_cs_11014(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_cs_11014(Rest, Z1, Z2, F@_1,
				TrUserData).

d_msg_sc_11008(Bin, TrUserData) ->
    dfp_read_field_def_sc_11008(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_11008(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_sc_11008_topScore(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_sc_11008(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_sc_11008_weekScore(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_sc_11008(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #sc_11008{topScore = F@_1, weekScore = F@_2};
dfp_read_field_def_sc_11008(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_sc_11008(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_sc_11008(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_11008(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_sc_11008(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_11008_topScore(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      16 ->
	  d_field_sc_11008_weekScore(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_sc_11008(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_sc_11008(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_sc_11008(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_sc_11008(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_sc_11008(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_sc_11008(<<>>, 0, 0, F@_1, F@_2, _) ->
    #sc_11008{topScore = F@_1, weekScore = F@_2}.

d_field_sc_11008_topScore(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_sc_11008_topScore(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_sc_11008_topScore(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11008(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_sc_11008_weekScore(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_sc_11008_weekScore(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_sc_11008_weekScore(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11008(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_sc_11008(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_sc_11008(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_sc_11008(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_sc_11008(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_sc_11008(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_11008(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_sc_11008(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_11008(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_sc_11008(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_11008(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_sc_11008(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_sc_11008(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_sc_11008(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_sc_11008(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

d_msg_sc_11010(Bin, TrUserData) ->
    dfp_read_field_def_sc_11010(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_11010(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_sc_11010_playerId(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_sc_11010(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_sc_11010_processData(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_sc_11010(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #sc_11010{playerId = F@_1, processData = F@_2};
dfp_read_field_def_sc_11010(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_sc_11010(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_sc_11010(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_11010(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_sc_11010(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_11010_playerId(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_sc_11010_processData(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_sc_11010(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_sc_11010(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_sc_11010(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_sc_11010(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_sc_11010(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_sc_11010(<<>>, 0, 0, F@_1, F@_2, _) ->
    #sc_11010{playerId = F@_1, processData = F@_2}.

d_field_sc_11010_playerId(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_sc_11010_playerId(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_sc_11010_playerId(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11010(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_sc_11010_processData(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_sc_11010_processData(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_sc_11010_processData(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_sc_11010(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_sc_11010(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_sc_11010(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_sc_11010(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_sc_11010(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_sc_11010(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_11010(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_sc_11010(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_11010(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_sc_11010(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_11010(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_sc_11010(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_sc_11010(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_sc_11010(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_sc_11010(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

d_msg_sc_11012(Bin, TrUserData) ->
    dfp_read_field_def_sc_11012(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_11012(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_sc_11012_result(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_sc_11012(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_sc_11012_winPlayerId(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_sc_11012(<<24, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_sc_11012_friendRank(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_sc_11012(<<32, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_sc_11012_rank(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_sc_11012(<<40, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_sc_11012_reason(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_sc_11012(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, _) ->
    #sc_11012{result = F@_1, winPlayerId = F@_2,
	      friendRank = F@_3, rank = F@_4, reason = F@_5};
dfp_read_field_def_sc_11012(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_sc_11012(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_sc_11012(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_11012(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_sc_11012(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_11012_result(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      16 ->
	  d_field_sc_11012_winPlayerId(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_sc_11012_friendRank(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      32 ->
	  d_field_sc_11012_rank(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      40 ->
	  d_field_sc_11012_reason(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_sc_11012(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
	    1 ->
		skip_64_sc_11012(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData);
	    2 ->
		skip_length_delimited_sc_11012(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_sc_11012(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_sc_11012(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData)
	  end
    end;
dg_read_field_def_sc_11012(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    #sc_11012{result = F@_1, winPlayerId = F@_2,
	      friendRank = F@_3, rank = F@_4, reason = F@_5}.

d_field_sc_11012_result(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_sc_11012_result(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_sc_11012_result(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11012(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_sc_11012_winPlayerId(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_sc_11012_winPlayerId(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_sc_11012_winPlayerId(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11012(RestF, 0, 0, F@_1,
				NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_sc_11012_friendRank(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_sc_11012_friendRank(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_sc_11012_friendRank(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11012(RestF, 0, 0, F@_1, F@_2,
				NewFValue, F@_4, F@_5, TrUserData).

d_field_sc_11012_rank(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_sc_11012_rank(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_sc_11012_rank(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11012(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, F@_5, TrUserData).

d_field_sc_11012_reason(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_sc_11012_reason(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_sc_11012_reason(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11012(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, NewFValue, TrUserData).

skip_varint_sc_11012(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_sc_11012(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
skip_varint_sc_11012(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_sc_11012(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_sc_11012(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_11012(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
skip_length_delimited_sc_11012(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_11012(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_group_sc_11012(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_11012(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_32_sc_11012(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_sc_11012(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_64_sc_11012(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_sc_11012(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

d_msg_cs_11002(Bin, TrUserData) ->
    dfp_read_field_def_cs_11002(Bin, 0, 0, TrUserData).

dfp_read_field_def_cs_11002(<<>>, 0, 0, _) ->
    #cs_11002{};
dfp_read_field_def_cs_11002(Other, Z1, Z2,
			    TrUserData) ->
    dg_read_field_def_cs_11002(Other, Z1, Z2, TrUserData).

dg_read_field_def_cs_11002(<<1:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_11002(Rest, N + 7, X bsl N + Acc,
			       TrUserData);
dg_read_field_def_cs_11002(<<0:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_cs_11002(Rest, 0, 0, TrUserData);
      1 -> skip_64_cs_11002(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_cs_11002(Rest, 0, 0, TrUserData);
      3 ->
	  skip_group_cs_11002(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_cs_11002(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_cs_11002(<<>>, 0, 0, _) ->
    #cs_11002{}.

skip_varint_cs_11002(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    skip_varint_cs_11002(Rest, Z1, Z2, TrUserData);
skip_varint_cs_11002(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_cs_11002(Rest, Z1, Z2, TrUserData).

skip_length_delimited_cs_11002(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_11002(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
skip_length_delimited_cs_11002(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_11002(Rest2, 0, 0, TrUserData).

skip_group_cs_11002(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_11002(Rest, 0, Z2, TrUserData).

skip_32_cs_11002(<<_:32, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_11002(Rest, Z1, Z2, TrUserData).

skip_64_cs_11002(<<_:64, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_11002(Rest, Z1, Z2, TrUserData).

d_msg_sc_11015(Bin, TrUserData) ->
    dfp_read_field_def_sc_11015(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_11015(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_sc_11015_time(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_sc_11015(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_sc_11015_millisecond(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_sc_11015(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #sc_11015{time = F@_1, millisecond = F@_2};
dfp_read_field_def_sc_11015(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_sc_11015(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_sc_11015(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_11015(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_sc_11015(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_11015_time(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      16 ->
	  d_field_sc_11015_millisecond(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_sc_11015(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_sc_11015(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_sc_11015(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_sc_11015(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_sc_11015(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_sc_11015(<<>>, 0, 0, F@_1, F@_2, _) ->
    #sc_11015{time = F@_1, millisecond = F@_2}.

d_field_sc_11015_time(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_sc_11015_time(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_sc_11015_time(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11015(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_sc_11015_millisecond(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_sc_11015_millisecond(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_sc_11015_millisecond(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11015(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_sc_11015(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_sc_11015(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_sc_11015(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_sc_11015(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_sc_11015(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_11015(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_sc_11015(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_11015(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_sc_11015(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_11015(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_sc_11015(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_sc_11015(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_sc_11015(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_sc_11015(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

d_msg_cs_11007(Bin, TrUserData) ->
    dfp_read_field_def_cs_11007(Bin, 0, 0, TrUserData).

dfp_read_field_def_cs_11007(<<>>, 0, 0, _) ->
    #cs_11007{};
dfp_read_field_def_cs_11007(Other, Z1, Z2,
			    TrUserData) ->
    dg_read_field_def_cs_11007(Other, Z1, Z2, TrUserData).

dg_read_field_def_cs_11007(<<1:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_11007(Rest, N + 7, X bsl N + Acc,
			       TrUserData);
dg_read_field_def_cs_11007(<<0:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_cs_11007(Rest, 0, 0, TrUserData);
      1 -> skip_64_cs_11007(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_cs_11007(Rest, 0, 0, TrUserData);
      3 ->
	  skip_group_cs_11007(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_cs_11007(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_cs_11007(<<>>, 0, 0, _) ->
    #cs_11007{}.

skip_varint_cs_11007(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    skip_varint_cs_11007(Rest, Z1, Z2, TrUserData);
skip_varint_cs_11007(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_cs_11007(Rest, Z1, Z2, TrUserData).

skip_length_delimited_cs_11007(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_11007(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
skip_length_delimited_cs_11007(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_11007(Rest2, 0, 0, TrUserData).

skip_group_cs_11007(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_11007(Rest, 0, Z2, TrUserData).

skip_32_cs_11007(<<_:32, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_11007(Rest, Z1, Z2, TrUserData).

skip_64_cs_11007(<<_:64, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_11007(Rest, Z1, Z2, TrUserData).

d_msg_shootPlayerInfo(Bin, TrUserData) ->
    dfp_read_field_def_shootPlayerInfo(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_shootPlayerInfo(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_shootPlayerInfo_playerId(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_shootPlayerInfo(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_shootPlayerInfo_score(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_shootPlayerInfo(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #shootPlayerInfo{playerId = F@_1, score = F@_2};
dfp_read_field_def_shootPlayerInfo(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_shootPlayerInfo(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_shootPlayerInfo(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_shootPlayerInfo(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_shootPlayerInfo(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_shootPlayerInfo_playerId(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      16 ->
	  d_field_shootPlayerInfo_score(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_shootPlayerInfo(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_shootPlayerInfo(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_shootPlayerInfo(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_shootPlayerInfo(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_shootPlayerInfo(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_shootPlayerInfo(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #shootPlayerInfo{playerId = F@_1, score = F@_2}.

d_field_shootPlayerInfo_playerId(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_shootPlayerInfo_playerId(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_shootPlayerInfo_playerId(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_shootPlayerInfo(RestF, 0, 0,
				       NewFValue, F@_2, TrUserData).

d_field_shootPlayerInfo_score(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_shootPlayerInfo_score(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_shootPlayerInfo_score(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_shootPlayerInfo(RestF, 0, 0, F@_1,
				       NewFValue, TrUserData).

skip_varint_shootPlayerInfo(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_shootPlayerInfo(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_shootPlayerInfo(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_shootPlayerInfo(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_shootPlayerInfo(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_shootPlayerInfo(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_shootPlayerInfo(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_shootPlayerInfo(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_shootPlayerInfo(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_shootPlayerInfo(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_shootPlayerInfo(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_shootPlayerInfo(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_shootPlayerInfo(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_shootPlayerInfo(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

d_msg_sc_11102(Bin, TrUserData) ->
    dfp_read_field_def_sc_11102(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), id([], TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_11102(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_sc_11102_result(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_sc_11102(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_sc_11102_round(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
dfp_read_field_def_sc_11102(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_sc_11102_scoreInfos(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_sc_11102(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_sc_11102_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
dfp_read_field_def_sc_11102(<<>>, 0, 0, F@_1, F@_2, R1,
			    F@_4, TrUserData) ->
    #sc_11102{result = F@_1, round = F@_2,
	      scoreInfos = lists_reverse(R1, TrUserData),
	      data = F@_4};
dfp_read_field_def_sc_11102(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, TrUserData) ->
    dg_read_field_def_sc_11102(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

dg_read_field_def_sc_11102(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_11102(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_sc_11102(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_11102_result(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      16 ->
	  d_field_sc_11102_round(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, TrUserData);
      26 ->
	  d_field_sc_11102_scoreInfos(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      34 ->
	  d_field_sc_11102_data(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_sc_11102(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
	    1 ->
		skip_64_sc_11102(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 TrUserData);
	    2 ->
		skip_length_delimited_sc_11102(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_sc_11102(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_sc_11102(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 TrUserData)
	  end
    end;
dg_read_field_def_sc_11102(<<>>, 0, 0, F@_1, F@_2, R1,
			   F@_4, TrUserData) ->
    #sc_11102{result = F@_1, round = F@_2,
	      scoreInfos = lists_reverse(R1, TrUserData),
	      data = F@_4}.

d_field_sc_11102_result(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_sc_11102_result(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_sc_11102_result(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11102(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, TrUserData).

d_field_sc_11102_round(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_sc_11102_round(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, TrUserData);
d_field_sc_11102_round(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11102(RestF, 0, 0, F@_1,
				NewFValue, F@_3, F@_4, TrUserData).

d_field_sc_11102_scoreInfos(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_sc_11102_scoreInfos(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_sc_11102_scoreInfos(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_shootPlayerInfo(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_sc_11102(RestF, 0, 0, F@_1, F@_2,
				cons(NewFValue, Prev, TrUserData), F@_4,
				TrUserData).

d_field_sc_11102_data(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_sc_11102_data(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, TrUserData);
d_field_sc_11102_data(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_sc_11102(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, TrUserData).

skip_varint_sc_11102(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_sc_11102(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
skip_varint_sc_11102(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_sc_11102(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_length_delimited_sc_11102(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_11102(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
skip_length_delimited_sc_11102(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_11102(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_group_sc_11102(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_11102(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_32_sc_11102(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_sc_11102(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_64_sc_11102(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_sc_11102(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

d_msg_cs_11012(Bin, TrUserData) ->
    dfp_read_field_def_cs_11012(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_cs_11012(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_cs_11012_winPlayerId(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_cs_11012(<<>>, 0, 0, F@_1, _) ->
    #cs_11012{winPlayerId = F@_1};
dfp_read_field_def_cs_11012(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_cs_11012(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_cs_11012(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_11012(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_cs_11012(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_cs_11012_winPlayerId(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_cs_11012(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_cs_11012(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_cs_11012(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_cs_11012(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_cs_11012(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_cs_11012(<<>>, 0, 0, F@_1, _) ->
    #cs_11012{winPlayerId = F@_1}.

d_field_cs_11012_winPlayerId(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_cs_11012_winPlayerId(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_cs_11012_winPlayerId(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_cs_11012(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_cs_11012(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_cs_11012(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_cs_11012(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_cs_11012(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_cs_11012(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_11012(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_cs_11012(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_11012(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_cs_11012(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_11012(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_cs_11012(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_cs_11012(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_cs_11012(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_cs_11012(Rest, Z1, Z2, F@_1,
				TrUserData).

d_msg_cs_11011(Bin, TrUserData) ->
    dfp_read_field_def_cs_11011(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_cs_11011(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_cs_11011_score(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_cs_11011(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_cs_11011_resultData(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_cs_11011(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #cs_11011{score = F@_1, resultData = F@_2};
dfp_read_field_def_cs_11011(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_cs_11011(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_cs_11011(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_11011(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_cs_11011(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_cs_11011_score(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      18 ->
	  d_field_cs_11011_resultData(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_cs_11011(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_cs_11011(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_cs_11011(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_cs_11011(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_cs_11011(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_cs_11011(<<>>, 0, 0, F@_1, F@_2, _) ->
    #cs_11011{score = F@_1, resultData = F@_2}.

d_field_cs_11011_score(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_cs_11011_score(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_cs_11011_score(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_cs_11011(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_cs_11011_resultData(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_cs_11011_resultData(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_cs_11011_resultData(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_cs_11011(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_cs_11011(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_cs_11011(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_cs_11011(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_cs_11011(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_cs_11011(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_11011(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_cs_11011(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_11011(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_cs_11011(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_11011(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_cs_11011(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_cs_11011(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_cs_11011(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_cs_11011(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

d_msg_cs_11006(Bin, TrUserData) ->
    dfp_read_field_def_cs_11006(Bin, 0, 0, TrUserData).

dfp_read_field_def_cs_11006(<<>>, 0, 0, _) ->
    #cs_11006{};
dfp_read_field_def_cs_11006(Other, Z1, Z2,
			    TrUserData) ->
    dg_read_field_def_cs_11006(Other, Z1, Z2, TrUserData).

dg_read_field_def_cs_11006(<<1:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_11006(Rest, N + 7, X bsl N + Acc,
			       TrUserData);
dg_read_field_def_cs_11006(<<0:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_cs_11006(Rest, 0, 0, TrUserData);
      1 -> skip_64_cs_11006(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_cs_11006(Rest, 0, 0, TrUserData);
      3 ->
	  skip_group_cs_11006(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_cs_11006(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_cs_11006(<<>>, 0, 0, _) ->
    #cs_11006{}.

skip_varint_cs_11006(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    skip_varint_cs_11006(Rest, Z1, Z2, TrUserData);
skip_varint_cs_11006(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_cs_11006(Rest, Z1, Z2, TrUserData).

skip_length_delimited_cs_11006(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_11006(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
skip_length_delimited_cs_11006(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_11006(Rest2, 0, 0, TrUserData).

skip_group_cs_11006(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_11006(Rest, 0, Z2, TrUserData).

skip_32_cs_11006(<<_:32, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_11006(Rest, Z1, Z2, TrUserData).

skip_64_cs_11006(<<_:64, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_11006(Rest, Z1, Z2, TrUserData).

d_msg_cs_11102(Bin, TrUserData) ->
    dfp_read_field_def_cs_11102(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_cs_11102(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_cs_11102_round(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_cs_11102(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_cs_11102_addScore(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_cs_11102(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_cs_11102_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_cs_11102(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #cs_11102{round = F@_1, addScore = F@_2, data = F@_3};
dfp_read_field_def_cs_11102(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_cs_11102(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_cs_11102(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_11102(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_cs_11102(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_cs_11102_round(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      16 ->
	  d_field_cs_11102_addScore(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      26 ->
	  d_field_cs_11102_data(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_cs_11102(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_cs_11102(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_cs_11102(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_cs_11102(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_cs_11102(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_cs_11102(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #cs_11102{round = F@_1, addScore = F@_2, data = F@_3}.

d_field_cs_11102_round(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_cs_11102_round(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_cs_11102_round(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_cs_11102(RestF, 0, 0, NewFValue,
				F@_2, F@_3, TrUserData).

d_field_cs_11102_addScore(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_cs_11102_addScore(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_cs_11102_addScore(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_cs_11102(RestF, 0, 0, F@_1,
				NewFValue, F@_3, TrUserData).

d_field_cs_11102_data(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_cs_11102_data(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_cs_11102_data(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_cs_11102(RestF, 0, 0, F@_1, F@_2,
				NewFValue, TrUserData).

skip_varint_cs_11102(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_cs_11102(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_cs_11102(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_cs_11102(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_cs_11102(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_11102(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_cs_11102(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_11102(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_cs_11102(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_11102(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_cs_11102(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_cs_11102(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_cs_11102(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_cs_11102(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

d_msg_sc_11011(Bin, TrUserData) ->
    dfp_read_field_def_sc_11011(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_11011(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_sc_11011_playerId(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_sc_11011(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_sc_11011_score(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_sc_11011(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_sc_11011_resultData(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_sc_11011(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #sc_11011{playerId = F@_1, score = F@_2,
	      resultData = F@_3};
dfp_read_field_def_sc_11011(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_sc_11011(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_sc_11011(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_11011(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_sc_11011(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_11011_playerId(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      16 ->
	  d_field_sc_11011_score(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      26 ->
	  d_field_sc_11011_resultData(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_sc_11011(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_sc_11011(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_sc_11011(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_sc_11011(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_sc_11011(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_sc_11011(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #sc_11011{playerId = F@_1, score = F@_2,
	      resultData = F@_3}.

d_field_sc_11011_playerId(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_sc_11011_playerId(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_sc_11011_playerId(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11011(RestF, 0, 0, NewFValue,
				F@_2, F@_3, TrUserData).

d_field_sc_11011_score(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_sc_11011_score(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_sc_11011_score(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11011(RestF, 0, 0, F@_1,
				NewFValue, F@_3, TrUserData).

d_field_sc_11011_resultData(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_sc_11011_resultData(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_sc_11011_resultData(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_sc_11011(RestF, 0, 0, F@_1, F@_2,
				NewFValue, TrUserData).

skip_varint_sc_11011(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_sc_11011(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_sc_11011(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_sc_11011(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_sc_11011(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_11011(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_sc_11011(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_11011(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_sc_11011(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_11011(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_sc_11011(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_sc_11011(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_sc_11011(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_sc_11011(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

d_msg_cs_11010(Bin, TrUserData) ->
    dfp_read_field_def_cs_11010(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_cs_11010(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_cs_11010_processData(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_cs_11010(<<>>, 0, 0, F@_1, _) ->
    #cs_11010{processData = F@_1};
dfp_read_field_def_cs_11010(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_cs_11010(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_cs_11010(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_11010(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_cs_11010(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_cs_11010_processData(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_cs_11010(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_cs_11010(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_cs_11010(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_cs_11010(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_cs_11010(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_cs_11010(<<>>, 0, 0, F@_1, _) ->
    #cs_11010{processData = F@_1}.

d_field_cs_11010_processData(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_cs_11010_processData(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_cs_11010_processData(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_cs_11010(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_cs_11010(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_cs_11010(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_cs_11010(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_cs_11010(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_cs_11010(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_11010(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_cs_11010(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_11010(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_cs_11010(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_11010(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_cs_11010(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_cs_11010(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_cs_11010(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_cs_11010(Rest, Z1, Z2, F@_1,
				TrUserData).

d_msg_cs_11101(Bin, TrUserData) ->
    dfp_read_field_def_cs_11101(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_cs_11101(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_cs_11101_round(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_cs_11101(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_cs_11101_shootData(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_cs_11101(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #cs_11101{round = F@_1, shootData = F@_2};
dfp_read_field_def_cs_11101(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_cs_11101(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_cs_11101(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_11101(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_cs_11101(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_cs_11101_round(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      18 ->
	  d_field_cs_11101_shootData(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_cs_11101(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_cs_11101(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_cs_11101(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_cs_11101(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_cs_11101(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_cs_11101(<<>>, 0, 0, F@_1, F@_2, _) ->
    #cs_11101{round = F@_1, shootData = F@_2}.

d_field_cs_11101_round(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_cs_11101_round(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_cs_11101_round(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_cs_11101(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_cs_11101_shootData(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_cs_11101_shootData(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_cs_11101_shootData(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_cs_11101(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_cs_11101(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_cs_11101(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_cs_11101(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_cs_11101(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_cs_11101(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_11101(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_cs_11101(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_11101(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_cs_11101(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_11101(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_cs_11101(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_cs_11101(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_cs_11101(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_cs_11101(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

d_msg_sc_11005(Bin, TrUserData) ->
    dfp_read_field_def_sc_11005(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_11005(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_sc_11005_gameState(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_sc_11005(<<>>, 0, 0, F@_1, _) ->
    #sc_11005{gameState = F@_1};
dfp_read_field_def_sc_11005(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_sc_11005(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_sc_11005(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_11005(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_sc_11005(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_11005_gameState(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_sc_11005(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_sc_11005(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_sc_11005(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_sc_11005(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_sc_11005(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_sc_11005(<<>>, 0, 0, F@_1, _) ->
    #sc_11005{gameState = F@_1}.

d_field_sc_11005_gameState(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_sc_11005_gameState(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_sc_11005_gameState(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11005(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_sc_11005(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_sc_11005(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_sc_11005(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_sc_11005(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_sc_11005(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_11005(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_sc_11005(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_11005(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_sc_11005(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_11005(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_sc_11005(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_sc_11005(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_sc_11005(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_sc_11005(Rest, Z1, Z2, F@_1,
				TrUserData).

d_msg_cs_11005(Bin, TrUserData) ->
    dfp_read_field_def_cs_11005(Bin, 0, 0, TrUserData).

dfp_read_field_def_cs_11005(<<>>, 0, 0, _) ->
    #cs_11005{};
dfp_read_field_def_cs_11005(Other, Z1, Z2,
			    TrUserData) ->
    dg_read_field_def_cs_11005(Other, Z1, Z2, TrUserData).

dg_read_field_def_cs_11005(<<1:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_11005(Rest, N + 7, X bsl N + Acc,
			       TrUserData);
dg_read_field_def_cs_11005(<<0:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_cs_11005(Rest, 0, 0, TrUserData);
      1 -> skip_64_cs_11005(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_cs_11005(Rest, 0, 0, TrUserData);
      3 ->
	  skip_group_cs_11005(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_cs_11005(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_cs_11005(<<>>, 0, 0, _) ->
    #cs_11005{}.

skip_varint_cs_11005(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    skip_varint_cs_11005(Rest, Z1, Z2, TrUserData);
skip_varint_cs_11005(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_cs_11005(Rest, Z1, Z2, TrUserData).

skip_length_delimited_cs_11005(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_11005(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
skip_length_delimited_cs_11005(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_11005(Rest2, 0, 0, TrUserData).

skip_group_cs_11005(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_11005(Rest, 0, Z2, TrUserData).

skip_32_cs_11005(<<_:32, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_11005(Rest, Z1, Z2, TrUserData).

skip_64_cs_11005(<<_:64, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_11005(Rest, Z1, Z2, TrUserData).

d_msg_cs_11015(Bin, TrUserData) ->
    dfp_read_field_def_cs_11015(Bin, 0, 0, TrUserData).

dfp_read_field_def_cs_11015(<<>>, 0, 0, _) ->
    #cs_11015{};
dfp_read_field_def_cs_11015(Other, Z1, Z2,
			    TrUserData) ->
    dg_read_field_def_cs_11015(Other, Z1, Z2, TrUserData).

dg_read_field_def_cs_11015(<<1:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_11015(Rest, N + 7, X bsl N + Acc,
			       TrUserData);
dg_read_field_def_cs_11015(<<0:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_cs_11015(Rest, 0, 0, TrUserData);
      1 -> skip_64_cs_11015(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_cs_11015(Rest, 0, 0, TrUserData);
      3 ->
	  skip_group_cs_11015(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_cs_11015(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_cs_11015(<<>>, 0, 0, _) ->
    #cs_11015{}.

skip_varint_cs_11015(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    skip_varint_cs_11015(Rest, Z1, Z2, TrUserData);
skip_varint_cs_11015(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_cs_11015(Rest, Z1, Z2, TrUserData).

skip_length_delimited_cs_11015(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_11015(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
skip_length_delimited_cs_11015(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_11015(Rest2, 0, 0, TrUserData).

skip_group_cs_11015(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_11015(Rest, 0, Z2, TrUserData).

skip_32_cs_11015(<<_:32, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_11015(Rest, Z1, Z2, TrUserData).

skip_64_cs_11015(<<_:64, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_11015(Rest, Z1, Z2, TrUserData).

d_msg_sc_11002(Bin, TrUserData) ->
    dfp_read_field_def_sc_11002(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_11002(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_sc_11002_result(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_sc_11002(<<>>, 0, 0, F@_1, _) ->
    #sc_11002{result = F@_1};
dfp_read_field_def_sc_11002(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_sc_11002(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_sc_11002(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_11002(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_sc_11002(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_11002_result(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_sc_11002(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_sc_11002(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_sc_11002(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_sc_11002(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_sc_11002(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_sc_11002(<<>>, 0, 0, F@_1, _) ->
    #sc_11002{result = F@_1}.

d_field_sc_11002_result(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_sc_11002_result(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_sc_11002_result(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_11002(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_sc_11002(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_sc_11002(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_sc_11002(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_sc_11002(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_sc_11002(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_11002(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_sc_11002(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_11002(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_sc_11002(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_11002(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_sc_11002(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_sc_11002(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_sc_11002(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_sc_11002(Rest, Z1, Z2, F@_1,
				TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #sc_11009{} ->
	  merge_msg_sc_11009(Prev, New, TrUserData);
      #cs_11004{} ->
	  merge_msg_cs_11004(Prev, New, TrUserData);
      #sc_11101{} ->
	  merge_msg_sc_11101(Prev, New, TrUserData);
      #sc_11007{} ->
	  merge_msg_sc_11007(Prev, New, TrUserData);
      #cs_11008{} ->
	  merge_msg_cs_11008(Prev, New, TrUserData);
      #gamePlayerInfo{} ->
	  merge_msg_gamePlayerInfo(Prev, New, TrUserData);
      #sc_11006{} ->
	  merge_msg_sc_11006(Prev, New, TrUserData);
      #playerInfo{} ->
	  merge_msg_playerInfo(Prev, New, TrUserData);
      #sc_11003{} ->
	  merge_msg_sc_11003(Prev, New, TrUserData);
      #cs_11014{} ->
	  merge_msg_cs_11014(Prev, New, TrUserData);
      #sc_11008{} ->
	  merge_msg_sc_11008(Prev, New, TrUserData);
      #sc_11010{} ->
	  merge_msg_sc_11010(Prev, New, TrUserData);
      #sc_11012{} ->
	  merge_msg_sc_11012(Prev, New, TrUserData);
      #cs_11002{} ->
	  merge_msg_cs_11002(Prev, New, TrUserData);
      #sc_11015{} ->
	  merge_msg_sc_11015(Prev, New, TrUserData);
      #cs_11007{} ->
	  merge_msg_cs_11007(Prev, New, TrUserData);
      #shootPlayerInfo{} ->
	  merge_msg_shootPlayerInfo(Prev, New, TrUserData);
      #sc_11102{} ->
	  merge_msg_sc_11102(Prev, New, TrUserData);
      #cs_11012{} ->
	  merge_msg_cs_11012(Prev, New, TrUserData);
      #cs_11011{} ->
	  merge_msg_cs_11011(Prev, New, TrUserData);
      #cs_11006{} ->
	  merge_msg_cs_11006(Prev, New, TrUserData);
      #cs_11102{} ->
	  merge_msg_cs_11102(Prev, New, TrUserData);
      #sc_11011{} ->
	  merge_msg_sc_11011(Prev, New, TrUserData);
      #cs_11010{} ->
	  merge_msg_cs_11010(Prev, New, TrUserData);
      #cs_11101{} ->
	  merge_msg_cs_11101(Prev, New, TrUserData);
      #sc_11005{} ->
	  merge_msg_sc_11005(Prev, New, TrUserData);
      #cs_11005{} ->
	  merge_msg_cs_11005(Prev, New, TrUserData);
      #cs_11015{} ->
	  merge_msg_cs_11015(Prev, New, TrUserData);
      #sc_11002{} -> merge_msg_sc_11002(Prev, New, TrUserData)
    end.

merge_msg_sc_11009(#sc_11009{},
		   #sc_11009{playerId = NFplayerId}, _) ->
    #sc_11009{playerId = NFplayerId}.

merge_msg_cs_11004(_Prev, New, _TrUserData) -> New.

merge_msg_sc_11101(#sc_11101{playerId = PFplayerId,
			     shootData = PFshootData},
		   #sc_11101{result = NFresult, round = NFround,
			     playerId = NFplayerId, shootData = NFshootData},
		   _) ->
    #sc_11101{result = NFresult, round = NFround,
	      playerId =
		  if NFplayerId =:= undefined -> PFplayerId;
		     true -> NFplayerId
		  end,
	      shootData =
		  if NFshootData =:= undefined -> PFshootData;
		     true -> NFshootData
		  end}.

merge_msg_sc_11007(#sc_11007{},
		   #sc_11007{result = NFresult}, _) ->
    #sc_11007{result = NFresult}.

merge_msg_cs_11008(_Prev, New, _TrUserData) -> New.

merge_msg_gamePlayerInfo(#gamePlayerInfo{},
			 #gamePlayerInfo{playerId = NFplayerId, score = NFscore,
					 gameInfo = NFgameInfo},
			 _) ->
    #gamePlayerInfo{playerId = NFplayerId, score = NFscore,
		    gameInfo = NFgameInfo}.

merge_msg_sc_11006(#sc_11006{infos = PFinfos},
		   #sc_11006{infos = NFinfos}, TrUserData) ->
    #sc_11006{infos =
		  if PFinfos /= undefined, NFinfos /= undefined ->
			 'erlang_++'(PFinfos, NFinfos, TrUserData);
		     PFinfos == undefined -> NFinfos;
		     NFinfos == undefined -> PFinfos
		  end}.

merge_msg_playerInfo(#playerInfo{isRobot = PFisRobot,
				 battleTimes = PFbattleTimes},
		     #playerInfo{playerId = NFplayerId, openId = NFopenId,
				 nickname = NFnickname, avatarUrl = NFavatarUrl,
				 gender = NFgender, isRobot = NFisRobot,
				 battleTimes = NFbattleTimes},
		     _) ->
    #playerInfo{playerId = NFplayerId, openId = NFopenId,
		nickname = NFnickname, avatarUrl = NFavatarUrl,
		gender = NFgender,
		isRobot =
		    if NFisRobot =:= undefined -> PFisRobot;
		       true -> NFisRobot
		    end,
		battleTimes =
		    if NFbattleTimes =:= undefined -> PFbattleTimes;
		       true -> NFbattleTimes
		    end}.

merge_msg_sc_11003(#sc_11003{playerInfos =
				 PFplayerInfos,
			     seeds = PFseeds},
		   #sc_11003{readyTime = NFreadyTime,
			     playerInfos = NFplayerInfos, seeds = NFseeds},
		   TrUserData) ->
    #sc_11003{readyTime = NFreadyTime,
	      playerInfos =
		  if PFplayerInfos /= undefined,
		     NFplayerInfos /= undefined ->
			 'erlang_++'(PFplayerInfos, NFplayerInfos, TrUserData);
		     PFplayerInfos == undefined -> NFplayerInfos;
		     NFplayerInfos == undefined -> PFplayerInfos
		  end,
	      seeds =
		  if PFseeds /= undefined, NFseeds /= undefined ->
			 'erlang_++'(PFseeds, NFseeds, TrUserData);
		     PFseeds == undefined -> NFseeds;
		     NFseeds == undefined -> PFseeds
		  end}.

merge_msg_cs_11014(#cs_11014{openId = PFopenId},
		   #cs_11014{openId = NFopenId}, TrUserData) ->
    #cs_11014{openId =
		  if PFopenId /= undefined, NFopenId /= undefined ->
			 'erlang_++'(PFopenId, NFopenId, TrUserData);
		     PFopenId == undefined -> NFopenId;
		     NFopenId == undefined -> PFopenId
		  end}.

merge_msg_sc_11008(#sc_11008{},
		   #sc_11008{topScore = NFtopScore,
			     weekScore = NFweekScore},
		   _) ->
    #sc_11008{topScore = NFtopScore,
	      weekScore = NFweekScore}.

merge_msg_sc_11010(#sc_11010{},
		   #sc_11010{playerId = NFplayerId,
			     processData = NFprocessData},
		   _) ->
    #sc_11010{playerId = NFplayerId,
	      processData = NFprocessData}.

merge_msg_sc_11012(#sc_11012{friendRank = PFfriendRank,
			     rank = PFrank, reason = PFreason},
		   #sc_11012{result = NFresult,
			     winPlayerId = NFwinPlayerId,
			     friendRank = NFfriendRank, rank = NFrank,
			     reason = NFreason},
		   _) ->
    #sc_11012{result = NFresult,
	      winPlayerId = NFwinPlayerId,
	      friendRank =
		  if NFfriendRank =:= undefined -> PFfriendRank;
		     true -> NFfriendRank
		  end,
	      rank =
		  if NFrank =:= undefined -> PFrank;
		     true -> NFrank
		  end,
	      reason =
		  if NFreason =:= undefined -> PFreason;
		     true -> NFreason
		  end}.

merge_msg_cs_11002(_Prev, New, _TrUserData) -> New.

merge_msg_sc_11015(#sc_11015{},
		   #sc_11015{time = NFtime, millisecond = NFmillisecond},
		   _) ->
    #sc_11015{time = NFtime, millisecond = NFmillisecond}.

merge_msg_cs_11007(_Prev, New, _TrUserData) -> New.

merge_msg_shootPlayerInfo(#shootPlayerInfo{},
			  #shootPlayerInfo{playerId = NFplayerId,
					   score = NFscore},
			  _) ->
    #shootPlayerInfo{playerId = NFplayerId,
		     score = NFscore}.

merge_msg_sc_11102(#sc_11102{scoreInfos = PFscoreInfos,
			     data = PFdata},
		   #sc_11102{result = NFresult, round = NFround,
			     scoreInfos = NFscoreInfos, data = NFdata},
		   TrUserData) ->
    #sc_11102{result = NFresult, round = NFround,
	      scoreInfos =
		  if PFscoreInfos /= undefined,
		     NFscoreInfos /= undefined ->
			 'erlang_++'(PFscoreInfos, NFscoreInfos, TrUserData);
		     PFscoreInfos == undefined -> NFscoreInfos;
		     NFscoreInfos == undefined -> PFscoreInfos
		  end,
	      data =
		  if NFdata =:= undefined -> PFdata;
		     true -> NFdata
		  end}.

merge_msg_cs_11012(#cs_11012{},
		   #cs_11012{winPlayerId = NFwinPlayerId}, _) ->
    #cs_11012{winPlayerId = NFwinPlayerId}.

merge_msg_cs_11011(#cs_11011{},
		   #cs_11011{score = NFscore, resultData = NFresultData},
		   _) ->
    #cs_11011{score = NFscore, resultData = NFresultData}.

merge_msg_cs_11006(_Prev, New, _TrUserData) -> New.

merge_msg_cs_11102(#cs_11102{data = PFdata},
		   #cs_11102{round = NFround, addScore = NFaddScore,
			     data = NFdata},
		   _) ->
    #cs_11102{round = NFround, addScore = NFaddScore,
	      data =
		  if NFdata =:= undefined -> PFdata;
		     true -> NFdata
		  end}.

merge_msg_sc_11011(#sc_11011{},
		   #sc_11011{playerId = NFplayerId, score = NFscore,
			     resultData = NFresultData},
		   _) ->
    #sc_11011{playerId = NFplayerId, score = NFscore,
	      resultData = NFresultData}.

merge_msg_cs_11010(#cs_11010{},
		   #cs_11010{processData = NFprocessData}, _) ->
    #cs_11010{processData = NFprocessData}.

merge_msg_cs_11101(#cs_11101{},
		   #cs_11101{round = NFround, shootData = NFshootData},
		   _) ->
    #cs_11101{round = NFround, shootData = NFshootData}.

merge_msg_sc_11005(#sc_11005{},
		   #sc_11005{gameState = NFgameState}, _) ->
    #sc_11005{gameState = NFgameState}.

merge_msg_cs_11005(_Prev, New, _TrUserData) -> New.

merge_msg_cs_11015(_Prev, New, _TrUserData) -> New.

merge_msg_sc_11002(#sc_11002{},
		   #sc_11002{result = NFresult}, _) ->
    #sc_11002{result = NFresult}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #sc_11009{} ->
	  v_msg_sc_11009(Msg, [sc_11009], TrUserData);
      #cs_11004{} ->
	  v_msg_cs_11004(Msg, [cs_11004], TrUserData);
      #sc_11101{} ->
	  v_msg_sc_11101(Msg, [sc_11101], TrUserData);
      #sc_11007{} ->
	  v_msg_sc_11007(Msg, [sc_11007], TrUserData);
      #cs_11008{} ->
	  v_msg_cs_11008(Msg, [cs_11008], TrUserData);
      #gamePlayerInfo{} ->
	  v_msg_gamePlayerInfo(Msg, [gamePlayerInfo], TrUserData);
      #sc_11006{} ->
	  v_msg_sc_11006(Msg, [sc_11006], TrUserData);
      #playerInfo{} ->
	  v_msg_playerInfo(Msg, [playerInfo], TrUserData);
      #sc_11003{} ->
	  v_msg_sc_11003(Msg, [sc_11003], TrUserData);
      #cs_11014{} ->
	  v_msg_cs_11014(Msg, [cs_11014], TrUserData);
      #sc_11008{} ->
	  v_msg_sc_11008(Msg, [sc_11008], TrUserData);
      #sc_11010{} ->
	  v_msg_sc_11010(Msg, [sc_11010], TrUserData);
      #sc_11012{} ->
	  v_msg_sc_11012(Msg, [sc_11012], TrUserData);
      #cs_11002{} ->
	  v_msg_cs_11002(Msg, [cs_11002], TrUserData);
      #sc_11015{} ->
	  v_msg_sc_11015(Msg, [sc_11015], TrUserData);
      #cs_11007{} ->
	  v_msg_cs_11007(Msg, [cs_11007], TrUserData);
      #shootPlayerInfo{} ->
	  v_msg_shootPlayerInfo(Msg, [shootPlayerInfo],
				TrUserData);
      #sc_11102{} ->
	  v_msg_sc_11102(Msg, [sc_11102], TrUserData);
      #cs_11012{} ->
	  v_msg_cs_11012(Msg, [cs_11012], TrUserData);
      #cs_11011{} ->
	  v_msg_cs_11011(Msg, [cs_11011], TrUserData);
      #cs_11006{} ->
	  v_msg_cs_11006(Msg, [cs_11006], TrUserData);
      #cs_11102{} ->
	  v_msg_cs_11102(Msg, [cs_11102], TrUserData);
      #sc_11011{} ->
	  v_msg_sc_11011(Msg, [sc_11011], TrUserData);
      #cs_11010{} ->
	  v_msg_cs_11010(Msg, [cs_11010], TrUserData);
      #cs_11101{} ->
	  v_msg_cs_11101(Msg, [cs_11101], TrUserData);
      #sc_11005{} ->
	  v_msg_sc_11005(Msg, [sc_11005], TrUserData);
      #cs_11005{} ->
	  v_msg_cs_11005(Msg, [cs_11005], TrUserData);
      #cs_11015{} ->
	  v_msg_cs_11015(Msg, [cs_11015], TrUserData);
      #sc_11002{} ->
	  v_msg_sc_11002(Msg, [sc_11002], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_sc_11009/3}).
v_msg_sc_11009(#sc_11009{playerId = F1}, Path, _) ->
    v_type_int32(F1, [playerId | Path]), ok.

-dialyzer({nowarn_function,v_msg_cs_11004/3}).
v_msg_cs_11004(#cs_11004{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_sc_11101/3}).
v_msg_sc_11101(#sc_11101{result = F1, round = F2,
			 playerId = F3, shootData = F4},
	       Path, _) ->
    v_type_int32(F1, [result | Path]),
    v_type_int32(F2, [round | Path]),
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [playerId | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [shootData | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_sc_11007/3}).
v_msg_sc_11007(#sc_11007{result = F1}, Path, _) ->
    v_type_int32(F1, [result | Path]), ok.

-dialyzer({nowarn_function,v_msg_cs_11008/3}).
v_msg_cs_11008(#cs_11008{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_gamePlayerInfo/3}).
v_msg_gamePlayerInfo(#gamePlayerInfo{playerId = F1,
				     score = F2, gameInfo = F3},
		     Path, _) ->
    v_type_int64(F1, [playerId | Path]),
    v_type_int32(F2, [score | Path]),
    v_type_bytes(F3, [gameInfo | Path]),
    ok;
v_msg_gamePlayerInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, gamePlayerInfo}, X, Path).

-dialyzer({nowarn_function,v_msg_sc_11006/3}).
v_msg_sc_11006(#sc_11006{infos = F1}, Path,
	       TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_gamePlayerInfo(Elem, [infos | Path],
				     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, gamePlayerInfo}},
			 F1, [infos | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_playerInfo/3}).
v_msg_playerInfo(#playerInfo{playerId = F1, openId = F2,
			     nickname = F3, avatarUrl = F4, gender = F5,
			     isRobot = F6, battleTimes = F7},
		 Path, _) ->
    v_type_int64(F1, [playerId | Path]),
    v_type_string(F2, [openId | Path]),
    v_type_string(F3, [nickname | Path]),
    v_type_string(F4, [avatarUrl | Path]),
    v_type_string(F5, [gender | Path]),
    if F6 == undefined -> ok;
       true -> v_type_int32(F6, [isRobot | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_int32(F7, [battleTimes | Path])
    end,
    ok;
v_msg_playerInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, playerInfo}, X, Path).

-dialyzer({nowarn_function,v_msg_sc_11003/3}).
v_msg_sc_11003(#sc_11003{readyTime = F1,
			 playerInfos = F2, seeds = F3},
	       Path, TrUserData) ->
    v_type_int32(F1, [readyTime | Path]),
    if is_list(F2) ->
	   _ = [v_msg_playerInfo(Elem, [playerInfos | Path],
				 TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, playerInfo}}, F2,
			 [playerInfos | Path])
    end,
    if is_list(F3) ->
	   _ = [v_type_int32(Elem, [seeds | Path]) || Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F3,
			 [seeds | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_cs_11014/3}).
v_msg_cs_11014(#cs_11014{openId = F1}, Path, _) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [openId | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1,
			 [openId | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_sc_11008/3}).
v_msg_sc_11008(#sc_11008{topScore = F1, weekScore = F2},
	       Path, _) ->
    v_type_int32(F1, [topScore | Path]),
    v_type_int32(F2, [weekScore | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_sc_11010/3}).
v_msg_sc_11010(#sc_11010{playerId = F1,
			 processData = F2},
	       Path, _) ->
    v_type_int64(F1, [playerId | Path]),
    v_type_bytes(F2, [processData | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_sc_11012/3}).
v_msg_sc_11012(#sc_11012{result = F1, winPlayerId = F2,
			 friendRank = F3, rank = F4, reason = F5},
	       Path, _) ->
    v_type_int32(F1, [result | Path]),
    v_type_int64(F2, [winPlayerId | Path]),
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [friendRank | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [rank | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [reason | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_cs_11002/3}).
v_msg_cs_11002(#cs_11002{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_sc_11015/3}).
v_msg_sc_11015(#sc_11015{time = F1, millisecond = F2},
	       Path, _) ->
    v_type_int32(F1, [time | Path]),
    v_type_int64(F2, [millisecond | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_cs_11007/3}).
v_msg_cs_11007(#cs_11007{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_shootPlayerInfo/3}).
v_msg_shootPlayerInfo(#shootPlayerInfo{playerId = F1,
				       score = F2},
		      Path, _) ->
    v_type_int64(F1, [playerId | Path]),
    v_type_int32(F2, [score | Path]),
    ok;
v_msg_shootPlayerInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, shootPlayerInfo}, X, Path).

-dialyzer({nowarn_function,v_msg_sc_11102/3}).
v_msg_sc_11102(#sc_11102{result = F1, round = F2,
			 scoreInfos = F3, data = F4},
	       Path, TrUserData) ->
    v_type_int32(F1, [result | Path]),
    v_type_int32(F2, [round | Path]),
    if is_list(F3) ->
	   _ = [v_msg_shootPlayerInfo(Elem, [scoreInfos | Path],
				      TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, shootPlayerInfo}},
			 F3, [scoreInfos | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [data | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_cs_11012/3}).
v_msg_cs_11012(#cs_11012{winPlayerId = F1}, Path, _) ->
    v_type_int64(F1, [winPlayerId | Path]), ok.

-dialyzer({nowarn_function,v_msg_cs_11011/3}).
v_msg_cs_11011(#cs_11011{score = F1, resultData = F2},
	       Path, _) ->
    v_type_int32(F1, [score | Path]),
    v_type_bytes(F2, [resultData | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_cs_11006/3}).
v_msg_cs_11006(#cs_11006{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_cs_11102/3}).
v_msg_cs_11102(#cs_11102{round = F1, addScore = F2,
			 data = F3},
	       Path, _) ->
    v_type_int32(F1, [round | Path]),
    v_type_int32(F2, [addScore | Path]),
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [data | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_sc_11011/3}).
v_msg_sc_11011(#sc_11011{playerId = F1, score = F2,
			 resultData = F3},
	       Path, _) ->
    v_type_int64(F1, [playerId | Path]),
    v_type_int32(F2, [score | Path]),
    v_type_bytes(F3, [resultData | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_cs_11010/3}).
v_msg_cs_11010(#cs_11010{processData = F1}, Path, _) ->
    v_type_bytes(F1, [processData | Path]), ok.

-dialyzer({nowarn_function,v_msg_cs_11101/3}).
v_msg_cs_11101(#cs_11101{round = F1, shootData = F2},
	       Path, _) ->
    v_type_int32(F1, [round | Path]),
    v_type_bytes(F2, [shootData | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_sc_11005/3}).
v_msg_sc_11005(#sc_11005{gameState = F1}, Path, _) ->
    v_type_int32(F1, [gameState | Path]), ok.

-dialyzer({nowarn_function,v_msg_cs_11005/3}).
v_msg_cs_11005(#cs_11005{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_cs_11015/3}).
v_msg_cs_11015(#cs_11015{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_sc_11002/3}).
v_msg_sc_11002(#sc_11002{result = F1}, Path, _) ->
    v_type_int32(F1, [result | Path]), ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int64/2}).
v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, sc_11009},
      [#field{name = playerId, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, cs_11004}, []},
     {{msg, sc_11101},
      [#field{name = result, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = round, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = playerId, fnum = 3, rnum = 4,
	      type = int64, occurrence = optional, opts = []},
       #field{name = shootData, fnum = 4, rnum = 5,
	      type = bytes, occurrence = optional, opts = []}]},
     {{msg, sc_11007},
      [#field{name = result, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, cs_11008}, []},
     {{msg, gamePlayerInfo},
      [#field{name = playerId, fnum = 1, rnum = 2,
	      type = int64, occurrence = required, opts = []},
       #field{name = score, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = gameInfo, fnum = 3, rnum = 4,
	      type = bytes, occurrence = required, opts = []}]},
     {{msg, sc_11006},
      [#field{name = infos, fnum = 1, rnum = 2,
	      type = {msg, gamePlayerInfo}, occurrence = repeated,
	      opts = []}]},
     {{msg, playerInfo},
      [#field{name = playerId, fnum = 1, rnum = 2,
	      type = int64, occurrence = required, opts = []},
       #field{name = openId, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = nickname, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []},
       #field{name = avatarUrl, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []},
       #field{name = gender, fnum = 5, rnum = 6, type = string,
	      occurrence = required, opts = []},
       #field{name = isRobot, fnum = 6, rnum = 7, type = int32,
	      occurrence = optional, opts = []},
       #field{name = battleTimes, fnum = 7, rnum = 8,
	      type = int32, occurrence = optional, opts = []}]},
     {{msg, sc_11003},
      [#field{name = readyTime, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = playerInfos, fnum = 2, rnum = 3,
	      type = {msg, playerInfo}, occurrence = repeated,
	      opts = []},
       #field{name = seeds, fnum = 3, rnum = 4, type = int32,
	      occurrence = repeated, opts = []}]},
     {{msg, cs_11014},
      [#field{name = openId, fnum = 1, rnum = 2,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, sc_11008},
      [#field{name = topScore, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = weekScore, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, sc_11010},
      [#field{name = playerId, fnum = 1, rnum = 2,
	      type = int64, occurrence = required, opts = []},
       #field{name = processData, fnum = 2, rnum = 3,
	      type = bytes, occurrence = required, opts = []}]},
     {{msg, sc_11012},
      [#field{name = result, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = winPlayerId, fnum = 2, rnum = 3,
	      type = int64, occurrence = required, opts = []},
       #field{name = friendRank, fnum = 3, rnum = 4,
	      type = int32, occurrence = optional, opts = []},
       #field{name = rank, fnum = 4, rnum = 5, type = int32,
	      occurrence = optional, opts = []},
       #field{name = reason, fnum = 5, rnum = 6, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, cs_11002}, []},
     {{msg, sc_11015},
      [#field{name = time, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = millisecond, fnum = 2, rnum = 3,
	      type = int64, occurrence = required, opts = []}]},
     {{msg, cs_11007}, []},
     {{msg, shootPlayerInfo},
      [#field{name = playerId, fnum = 1, rnum = 2,
	      type = int64, occurrence = required, opts = []},
       #field{name = score, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, sc_11102},
      [#field{name = result, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = round, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = scoreInfos, fnum = 3, rnum = 4,
	      type = {msg, shootPlayerInfo}, occurrence = repeated,
	      opts = []},
       #field{name = data, fnum = 4, rnum = 5, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, cs_11012},
      [#field{name = winPlayerId, fnum = 1, rnum = 2,
	      type = int64, occurrence = required, opts = []}]},
     {{msg, cs_11011},
      [#field{name = score, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = resultData, fnum = 2, rnum = 3,
	      type = bytes, occurrence = required, opts = []}]},
     {{msg, cs_11006}, []},
     {{msg, cs_11102},
      [#field{name = round, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = addScore, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []},
       #field{name = data, fnum = 3, rnum = 4, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, sc_11011},
      [#field{name = playerId, fnum = 1, rnum = 2,
	      type = int64, occurrence = required, opts = []},
       #field{name = score, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = resultData, fnum = 3, rnum = 4,
	      type = bytes, occurrence = required, opts = []}]},
     {{msg, cs_11010},
      [#field{name = processData, fnum = 1, rnum = 2,
	      type = bytes, occurrence = required, opts = []}]},
     {{msg, cs_11101},
      [#field{name = round, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = shootData, fnum = 2, rnum = 3,
	      type = bytes, occurrence = required, opts = []}]},
     {{msg, sc_11005},
      [#field{name = gameState, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, cs_11005}, []}, {{msg, cs_11015}, []},
     {{msg, sc_11002},
      [#field{name = result, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    [sc_11009, cs_11004, sc_11101, sc_11007, cs_11008,
     gamePlayerInfo, sc_11006, playerInfo, sc_11003,
     cs_11014, sc_11008, sc_11010, sc_11012, cs_11002,
     sc_11015, cs_11007, shootPlayerInfo, sc_11102, cs_11012,
     cs_11011, cs_11006, cs_11102, sc_11011, cs_11010,
     cs_11101, sc_11005, cs_11005, cs_11015, sc_11002].


get_group_names() -> [].


get_msg_or_group_names() ->
    [sc_11009, cs_11004, sc_11101, sc_11007, cs_11008,
     gamePlayerInfo, sc_11006, playerInfo, sc_11003,
     cs_11014, sc_11008, sc_11010, sc_11012, cs_11002,
     sc_11015, cs_11007, shootPlayerInfo, sc_11102, cs_11012,
     cs_11011, cs_11006, cs_11102, sc_11011, cs_11010,
     cs_11101, sc_11005, cs_11005, cs_11015, sc_11002].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(sc_11009) ->
    [#field{name = playerId, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(cs_11004) -> [];
find_msg_def(sc_11101) ->
    [#field{name = result, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = round, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = playerId, fnum = 3, rnum = 4,
	    type = int64, occurrence = optional, opts = []},
     #field{name = shootData, fnum = 4, rnum = 5,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def(sc_11007) ->
    [#field{name = result, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(cs_11008) -> [];
find_msg_def(gamePlayerInfo) ->
    [#field{name = playerId, fnum = 1, rnum = 2,
	    type = int64, occurrence = required, opts = []},
     #field{name = score, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = gameInfo, fnum = 3, rnum = 4,
	    type = bytes, occurrence = required, opts = []}];
find_msg_def(sc_11006) ->
    [#field{name = infos, fnum = 1, rnum = 2,
	    type = {msg, gamePlayerInfo}, occurrence = repeated,
	    opts = []}];
find_msg_def(playerInfo) ->
    [#field{name = playerId, fnum = 1, rnum = 2,
	    type = int64, occurrence = required, opts = []},
     #field{name = openId, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = nickname, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []},
     #field{name = avatarUrl, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []},
     #field{name = gender, fnum = 5, rnum = 6, type = string,
	    occurrence = required, opts = []},
     #field{name = isRobot, fnum = 6, rnum = 7, type = int32,
	    occurrence = optional, opts = []},
     #field{name = battleTimes, fnum = 7, rnum = 8,
	    type = int32, occurrence = optional, opts = []}];
find_msg_def(sc_11003) ->
    [#field{name = readyTime, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = playerInfos, fnum = 2, rnum = 3,
	    type = {msg, playerInfo}, occurrence = repeated,
	    opts = []},
     #field{name = seeds, fnum = 3, rnum = 4, type = int32,
	    occurrence = repeated, opts = []}];
find_msg_def(cs_11014) ->
    [#field{name = openId, fnum = 1, rnum = 2,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def(sc_11008) ->
    [#field{name = topScore, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = weekScore, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(sc_11010) ->
    [#field{name = playerId, fnum = 1, rnum = 2,
	    type = int64, occurrence = required, opts = []},
     #field{name = processData, fnum = 2, rnum = 3,
	    type = bytes, occurrence = required, opts = []}];
find_msg_def(sc_11012) ->
    [#field{name = result, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = winPlayerId, fnum = 2, rnum = 3,
	    type = int64, occurrence = required, opts = []},
     #field{name = friendRank, fnum = 3, rnum = 4,
	    type = int32, occurrence = optional, opts = []},
     #field{name = rank, fnum = 4, rnum = 5, type = int32,
	    occurrence = optional, opts = []},
     #field{name = reason, fnum = 5, rnum = 6, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(cs_11002) -> [];
find_msg_def(sc_11015) ->
    [#field{name = time, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = millisecond, fnum = 2, rnum = 3,
	    type = int64, occurrence = required, opts = []}];
find_msg_def(cs_11007) -> [];
find_msg_def(shootPlayerInfo) ->
    [#field{name = playerId, fnum = 1, rnum = 2,
	    type = int64, occurrence = required, opts = []},
     #field{name = score, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(sc_11102) ->
    [#field{name = result, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = round, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = scoreInfos, fnum = 3, rnum = 4,
	    type = {msg, shootPlayerInfo}, occurrence = repeated,
	    opts = []},
     #field{name = data, fnum = 4, rnum = 5, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def(cs_11012) ->
    [#field{name = winPlayerId, fnum = 1, rnum = 2,
	    type = int64, occurrence = required, opts = []}];
find_msg_def(cs_11011) ->
    [#field{name = score, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = resultData, fnum = 2, rnum = 3,
	    type = bytes, occurrence = required, opts = []}];
find_msg_def(cs_11006) -> [];
find_msg_def(cs_11102) ->
    [#field{name = round, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = addScore, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []},
     #field{name = data, fnum = 3, rnum = 4, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def(sc_11011) ->
    [#field{name = playerId, fnum = 1, rnum = 2,
	    type = int64, occurrence = required, opts = []},
     #field{name = score, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = resultData, fnum = 3, rnum = 4,
	    type = bytes, occurrence = required, opts = []}];
find_msg_def(cs_11010) ->
    [#field{name = processData, fnum = 1, rnum = 2,
	    type = bytes, occurrence = required, opts = []}];
find_msg_def(cs_11101) ->
    [#field{name = round, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = shootData, fnum = 2, rnum = 3,
	    type = bytes, occurrence = required, opts = []}];
find_msg_def(sc_11005) ->
    [#field{name = gameState, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(cs_11005) -> [];
find_msg_def(cs_11015) -> [];
find_msg_def(sc_11002) ->
    [#field{name = result, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.1.3".

gpb_version_as_list() ->
    [4,1,3].
