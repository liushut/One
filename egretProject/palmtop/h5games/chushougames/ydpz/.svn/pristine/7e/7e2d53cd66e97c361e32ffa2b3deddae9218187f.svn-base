var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var __extends = this && this.__extends || function __extends(t, e) { 
 function r() { 
 this.constructor = t;
}
for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
r.prototype = e.prototype, t.prototype = new r();
};
var GameView = (function (_super) {
    __extends(GameView, _super);
    function GameView() {
        var _this = _super.call(this) || this;
        _this.qiuS = new QiuS();
        _this.qiuB = new QiuB(); //黄球
        _this.qsY = 1300; //绿色小球（射击小球）的初始y值
        _this.guanshu = 1; //关数
        _this.countDown = 1; //绿球下落到底端的时间
        _this.health = 3; //生命值
        _this.score = 0; //得分
        _this.time = 0;
        _this.winId = 1;
        _this.friendRank = 2;
        _this.rank = 1;
        _this.topSocre = 10; //查询玩家最高分
        _this.weekScore = 20; //本周最高分
        //点击屏幕后
        _this.speedQius = 5; //绿球初始速度
        _this.flag = false;
        _this.countDownLabel = new eui.Label();
        _this.DISTANCE = [];
        _this.id = 1;
        _this.count_down = 0;
        _this.qiusX = 0;
        _this.qiusY = 0;
        _this.skinName = "GameViewSkin";
        return _this;
    }
    ; //绿球
    GameView.prototype.partAdded = function (partName, instance) {
        _super.prototype.partAdded.call(this, partName, instance);
    };
    GameView.prototype.childrenCreated = function () {
        _super.prototype.childrenCreated.call(this);
        ZJ.UIManager.instance.destroyView(UIName.Loading);
        this.bgAll.touchEnabled = false;
        this.loadTable(this.guanshu);
        if (ModuleConfig.compile.danji) {
            this.countToDown();
            this.nextG();
        }
        else {
            this.initCDM();
        }
        console.log("children create");
    };
    GameView.prototype.initCDM = function () {
        this.countToDown();
        this.nextG();
        //this.callBack();
    };
    GameView.prototype.callBack = function () {
        var _this = this;
        var model = MyCDM.instance;
        model.OnData11003 = function (data) {
            // 游戏开始逻辑
            _this.backUI();
            _this.countToDown(); //倒计时显示321图片
            _this.nextG();
            _this.nickName.text = data.playerInfos[0].nickname;
            console.log("这里得到网络玩家" + _this.nickName.text);
        };
        model.SendProcessData11010({
            processData: this.score,
        });
        model.OnData11010 = function (data) {
            _this.myAny = data.pcocessData;
        };
        model.SendScoredData11011({
            score: this.score,
            resultData: []
        });
        model.OnData11011 = function (data) {
            _this.score = data.score;
            _this.myAny = data.resultData;
        };
        model.OnData11012 = function (data) {
            //得到胜利玩家Id
            _this.winId = data.winPlayerId;
            _this.friendRank = data.friendRank;
            _this.rank = data.rank;
            console.log("胜利玩家" + _this.winId);
            console.log("返回通知" + data.result);
        };
        model.GetHighestScore11008(); //查询玩家最高分
        model.OnData11008 = function (data) {
            _this.topSocre = data.topScore;
            _this.weekScore = data.weekSocre;
        };
    };
    GameView.prototype.nextG = function () {
        //ZJ.EventManager.instance.addEventListener("showBall",this.showBall,this);
        this.addEventListener(egret.Event.ENTER_FRAME, this.runBg, this); //帧事件
        this.addOther();
        console.log("ff");
        //this.dlS = this.qbY * 0.7;
        this.createQiuS();
        this.createQiuB();
    };
    GameView.prototype.showBall = function () {
        this.qiuB.alpha = 1;
        this.qiuB.alpha = 1;
        this.scoreLabel.alpha = 1;
        this.countToDown();
    };
    GameView.prototype.setFlag = function (choose) {
        this.flag = choose;
    };
    GameView.prototype.setClick = function () {
        var _this = this;
        if (!this.flag) {
            return;
        }
        egret.Tween.removeTweens(this.qiuS);
        egret.Tween.get(this.qiuS, { onChange: this.crash, onChangeObj: this }).to({ y: this.bgAll.y }, this.qiuS.y / this.speedQius, egret.Ease.quadIn).call(function () {
            _this.crashAfter(_this.qiuS.x, _this.qiuS.y);
        }, this);
        this.setFlag(false);
    };
    GameView.prototype.countToDown = function () {
        this.countDownLabel.x = this.stage.stageWidth / 2;
        this.countDownLabel.y = this.stage.stageHeight / 2;
        this.countDownLabel.size = 180;
        this.timer = new egret.Timer(1000, 4);
        this.timer.addEventListener(egret.TimerEvent.TIMER, this.changeSource, this);
        this.timer.start();
        console.log("countDown");
    };
    GameView.prototype.backUI = function () {
        this.score = 0;
        this.health = 3;
        this.scoreLabel.text = this.score.toString();
        this.healthLabel.text = this.health.toString();
    };
    GameView.prototype.changeSource = function () {
        this.addChild(this.countDownLabel);
        if (GameView.i == 3) {
            this.countDownLabel.text = "3";
        }
        else if (GameView.i == 2) {
            this.countDownLabel.text = "2";
        }
        else if (GameView.i == 1) {
            this.countDownLabel.text = "1";
        }
        else if (GameView.i == 0) {
            this.removeChild(this.countDownLabel);
            this.bgAll.touchEnabled = true;
            this.setFlag(true); //可以点击
            this.bgAll.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.setClick, this);
        }
        GameView.i--;
    };
    GameView.prototype.loadTable = function (passid) {
        if (passid > 20) {
            passid = 20;
        }
        var table = ZJ.TableManager.instance.tables[xlsx.cfg_c_ydpz]; ////得到这张表
        var aaa = table[passid][xlsx.c_ydpz_distance];
        this.DISTANCE = JSON.parse(aaa);
        var tmpd = ZJ.MathUtil.randomRange(this.DISTANCE[0], this.DISTANCE[1] + 1); //返回min max中 随机数
        this.time = JSON.parse(table[passid][xlsx.c_ydpz_time]);
        //this.count_down = table[passid][xlsx.c_ydpz_count_down];
        this.disMax = this.DISTANCE[1]; //距离最大值
        this.disMin = this.DISTANCE[0]; //最小值
        this.timeMin = this.time[0];
        this.timeMax = this.time[1];
        this.countDown = table[passid][xlsx.c_ydpz_count_down];
    };
    //创建绿色发射球
    GameView.prototype.createQiuS = function () {
        var _this = this;
        this.setFlag(true); //可以点击
        this.qiuS.anchorOffsetX = this.qiuS.width / 2;
        this.qiuS.anchorOffsetY = this.qiuS.height / 2;
        this.qiuS.x = this.bgAll.width / 2;
        this.qiuS.y = this.qsY;
        this.bgAll.addChild(this.qiuS);
        //这是绿色球碰到锯齿后  
        if (this.guanshu == 1) {
            this.qiuS.y = this.qsY;
        }
        else if (this.guanshu > 1) {
            egret.Tween.get(this.qiuS).to({ y: this.bgAll.height }, this.countDown).call(function () {
                egret.Tween.removeAllTweens();
                _this.bgAll.removeChildren();
                _this.crashAfter(_this.qiuS.x, _this.bgAll.height - _this.qiuS.width); //碰到上下边
            }, this);
        }
        this.runBg(); //背景运动
    };
    //创建黄色球
    GameView.prototype.createQiuB = function () {
        this.qiuB.y = 0;
        this.qiuB.anchorOffsetX = this.qiuB.width / 2;
        this.qiuB.anchorOffsetY = this.qiuB.height / 2;
        this.bgAll.addChild(this.qiuB);
        var sj;
        if (Math.ceil(Math.random() * 100) < 50) {
            sj = Math.ceil(Math.random() * 250) + 150;
        }
        else {
            sj = this.bgAll.width - (Math.ceil(Math.random() * 250) + 150);
        }
        var xDis = this.disMax - this.disMin;
        this.qbY = this.qsY - xDis * Math.random() * 10 - this.qiuB.width; //得到黄色小球初始y
        this.speed = Math.random() + 1; //来回的速度
        egret.Tween.get(this.qiuB).to({ y: this.qbY }, 800, egret.Ease.quartOut); //这里动画过来
        this.qbTime = (this.timeMin + (this.timeMax - this.timeMin) * Math.random()) / 2; //黄球运动半个来回的时间
        //以下做往返运动
        if (this.guanshu > 1) {
            this.qiuB.x = sj;
            if (sj >= this.bgAll.width / 2) {
                this.qbRun(this.speed); //左右
            }
            else {
                this.qbRunF(this.speed); //右左
            }
        }
        else if (this.guanshu == 1) {
            this.qiuB.x = this.qiuB.width / 2;
            this.qbRunF(this.speed); //右左
        }
    };
    GameView.prototype.runOnChange = function () {
        this.X = this.qiuB.x;
        this.Y = this.qiuB.y;
    };
    //设置黄色球运动速度的曲线
    GameView.prototype.setPath = function (t) {
        return egret.Ease.getPowInOut(t);
    };
    //黄色球水平运动（左-右）
    GameView.prototype.qbRun = function (speed) {
        egret.Tween.get(this.qiuB, { onChange: this.runOnChange, onChangeObj: this }).
            to({ x: this.qiuB.width / 2 }, this.qbTime, this.setPath(speed))
            .call(function () {
            egret.Tween.get(this.qiuB, { onChange: this.runOnChange, onChangeObj: this }).
                to({ x: this.bgAll.width - this.qiuB.width / 2 }, this.qbTime, this.setPath(speed))
                .call(function () {
                this.qiuB.x = this.bgAll.width - this.qiuB.width / 2;
                this.qbRun(this.speed);
            }, this);
        }, this);
    };
    //黄色球水平运动（右-左）
    GameView.prototype.qbRunF = function (speed) {
        egret.Tween.get(this.qiuB, { onChange: this.runOnChange, onChangeObj: this })
            .to({ x: this.bgAll.width - this.qiuB.width / 2 }, this.qbTime, this.setPath(speed))
            .call(function () {
            egret.Tween.get(this.qiuB, { onChange: this.runOnChange, onChangeObj: this }).
                to({ x: this.qiuB.width / 2 }, this.qbTime, this.setPath(speed))
                .call(function () {
                this.qiuB.x = this.qiuB.width / 2;
                this.qbRunF(this.speed);
            }, this);
        }, this);
    };
    //碰撞到上下边后
    GameView.prototype.crashAfter = function (aX, aY) {
        egret.Tween.removeAllTweens();
        this.guanshu = 1;
        this.loadTable(this.guanshu);
        this.health--;
        var a = ZJ.ResManager.instance.loadDragonBones("ls");
        a.x = aX;
        a.y = aY;
        a.animation.play("", 1);
        this.bgAll.addChild(a);
        // error
        console.log("dong 111111");
        //同步分数    最高分没有从服务器得到
        MyCDM.instance.SendScoredData11011({
            score: this.score,
            resultData: []
        });
        if (this.health == 0) {
            this.qiuB.alpha = 0;
            this.qiuS.alpha = 0;
            this.scoreLabel.alpha = 0;
            MyCDM.instance.SendGameResult11012({
                winPlayerId: this.winId,
            });
            ZJ.UIManager.instance.openView(UIName.Settle); //setData
        }
        this.nextG();
    };
    //两球碰撞
    GameView.prototype.crash = function () {
        var a = this.qiuB.width / 2 + this.qiuS.width / 2;
        var distance = Math.sqrt(Math.pow(this.qiuS.y - this.Y, 2) + Math.pow(this.qiuS.x - this.X, 2));
        if (distance <= a) {
            egret.Tween.removeAllTweens();
            this.guanshu++;
            console.log(GameView.passID);
            MyCDM.instance.SendProcessData11010({
                processData: this.score,
            });
            this.score++;
            this.scoreLabel.text = this.score.toString();
            console.log(this.score);
            this.loadTable(this.guanshu);
            var hs = ZJ.ResManager.instance.loadDragonBones("hs");
            hs.x = this.X;
            hs.y = this.Y;
            this.bgAll.addChild(hs);
            hs.animation.play("", 1);
            egret.Tween.removeTweens(this.qiuS);
            egret.Tween.removeTweens(this.qiuB);
            this.nextG();
        }
    };
    //背景运动
    GameView.prototype.runBg = function () {
        this.bg1.y += 1;
        this.bg2.y += 1;
        if (this.bg1.y > 1918) {
            this.bg1.y = -1900;
        }
        else if (this.bg2.y > 1918) {
            this.bg2.y = -1900;
        }
    };
    //下一关
    GameView.prototype.addOther = function () {
        this.bgAll.addChild(this.scoreLabel);
        this.bgAll.addChild(this.healthLabel);
        this.bgAll.addChild(this.nickName);
        this.bgAll.addChild(this.nickNameID);
        this.bgAll.addChild(this.shangjuchi);
        this.bgAll.addChild(this.xiajuchi);
        this.scoreLabel.text = this.score.toString();
        this.healthLabel.text = this.health.toString();
    };
    //倒计时显示图片
    GameView.i = 3;
    //设置配置表   
    GameView.passID = 1;
    return GameView;
}(ZJ.ViewBase));
__reflect(GameView.prototype, "GameView");
//# sourceMappingURL=GameView.js.map