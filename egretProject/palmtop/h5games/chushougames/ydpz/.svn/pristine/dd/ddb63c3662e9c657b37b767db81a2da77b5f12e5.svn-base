class GameView extends ZJ.ViewBase {
	public constructor() {
		super();
		this.skinName = "GameViewSkin"
	}
	public bgAll: eui.Group;
	public qiuS: QiuS = new QiuS();;//绿球
	public tuowei: egret.Bitmap = new egret.Bitmap();
	public maskImg: egret.Bitmap = new egret.Bitmap();
	public qiuB: QiuB = new QiuB();//黄球
	public qiuB1: QiuB = new QiuB();//黄球1 
	private qsY = 1500; //绿色小球（射击小球）的初始y值
	private qbY: number;  //黄色小球（被射击小球）的初始y值
	private qby1: number;//黄1 初始y值
	private X: number;  //黄球运动中的x值
	private Y: number;   //黄球运动中的y值
	private X1;
	private Y1;
	private guanshu = 1; //关数
	private speed: number; //黄球运动的速度
	private bg1: eui.Image;
	private bg2: eui.Image;
	private game: eui.Group;
	private isOnce: boolean = true;
	private resource = ZJ.ResManager.instance.loadDragonBones("hs");//资源加载
	private disMax: number = 0;  //两个圆球之间的距离的最大值
	private disMin: number = 0;  //两个圆球之间的距离的最小值
	private timeMax: number;  //黄点的移动半个来回的时间最大值
	private timeMin: number;  //黄点的移动半个来回的时间最小值
	private qbTime: number;  //黄球运动半个来回的时间
	private qbTime1: number = 0;//黄球1运动半个来回的时间
	private countDown: number = 1; //绿球下落到底端的时间
	private moveDistace: number = 0;
	private timer: egret.Timer;//计时器
	private health: number = 1;//生命值
	private time: number = 0;
	private table = ZJ.TableManager.instance.tables[xlsx.cfg_c_ydpz];////得到这张表
	private nextDistance: number[] = [];//下一关的数据
	private nextTime: number = 0;
	private nextTimeMin: number = 0;
	private nextTimeMax: number = 0;
	private nextDisMax: number = 0;
	private nextDisMin: number = 0;
	private nextCountDown: number = 0;
	private qiusX: number = 0;
	private qiusY: number = 0;
	private smallX: number = 0;
	private smallY: number = 0;
	private tailArray: eui.Image[] = [];
	private ls = ZJ.ResManager.instance.loadDragonBones("ls")
	//跳跃间隔时间，背景与绿球的共同运动
	private runTime = 250;
	private isRun = false;
	private comboNum: eui.BitmapLabel;//连击
	//需要显示的

	private shangjuchi: eui.Image;
	private xiajuchi: eui.Image;
	public scoreBitLabel: eui.BitmapLabel;
	private topFather: eui.Group;
	private danjuchi: eui.Image;
	private blank: number = 0;
	private backFather: eui.Group;
	private startGroup: eui.Group;
	private hitGroup: eui.Group;
	private comboGroups: eui.Group;

	private continuePerfect: number = 0;
	//需要发送的
	private myAny: any;
	private winId: number = 1;
	private friendRank: number = 2;//好友排名
	private rank: number = 1;//游戏排名
	private weekScore = 0;//查询本周最高分
	private score: number = 0;//得分

	//音频资源
	private sendAudio: egret.Sound = new egret.Sound();//发射
	private collisionAudion: egret.Sound = new egret.Sound();//碰撞
	private deathAudio: egret.Sound = new egret.Sound();//死亡
	private comboAudio: egret.Sound = new egret.Sound();//连击	
	private sendChannel: egret.SoundChannel;
	private collisionChannel: egret.SoundChannel;
	private deathChannel: egret.SoundChannel;
	private comboChannel: egret.SoundChannel;
	private isFirst = true;//是不是第一次加载
	private loadAudio() {
		// 1、audio接口
		// ZJ.AudioManager.Instance.play("sendAudio")
		// 2、MP3（格式工厂44100hz 96kbps） 
		// 3、遇到问题及时说 
		this.sendAudio.load("resource/audio/sendAudio.wav");
		this.collisionAudion.load("resource/audio/collisionAudio.wav");
		this.deathAudio.load("resource/audio/deathAudio.wav");
		this.comboAudio.load("resource/audio/comboAudio.wav");
		// 4、image
		// let a = new eui.Image()
		// a.source = "xiaoqiu_png"
		// 5、以res为例子，很多可以尝试ZJ.xxxx，例如ZJ.ResManager.instance.loadExistRes 
		// 6、沟通 1q一下他 2说明 

		// ZJ.GoPool.instance.setDesign(GoConfig.Test, ()=>{
		// let a = new eui.Image()
		// a.source = "xiaoqiu_png"
		// return a;
		// })
		// ZJ.GoPool.instance.get(GoConfig.Test)
		// ZJ.GoPool.instance.push(GoConfig.Test, a)
		for (let i = 0; i < 7; i++) {
			let tail: eui.Image = new eui.Image;
			let img = RES.getRes("xiaoqiu2_png");
			let rect: egret.Rectangle = new egret.Rectangle(2, 82, 130, 43);
			img.scale9Grid = rect
			tail.source = img;
			this.tailArray.push(tail);
		}
		let img = RES.getRes("xiaoqiu_png");
		let rect: egret.Rectangle = new egret.Rectangle(2, 82, 130, 43);
		img.scale9Grid = rect;
		this.tuowei.texture = img;
		this.maskImg.texture = RES.getRes("daqiu_png");
	}
	protected partAdded(partName: string, instance: any): void {
		super.partAdded(partName, instance);
	}
	private runOnChange() {
		this.X = this.qiuB.x;//黄球x  y  在动画变化函数中实时更新
		this.Y = this.qiuB.y;
		this.X1 = this.qiuB1.x;//黄球1x  y  在动画变化函数中实时更新
		this.Y1 = this.qiuB1.y;
	}
	protected childrenCreated(): void {//这里初始化 
		super.childrenCreated();
		ZJ.UIManager.instance.destroyView(UIName.Loading);
		this.bgAll.touchEnabled = false;
		this.loadTable(this.guanshu);
		this.loadAudio();
		this.backUI();
		if (ModuleConfig.compile.danji) {
			this.countToDown();
			this.nextG();
			this.showTopAndButtom();
		}
		else {
			this.initCDM()
		}
		console.log("children create");
	}
	private initCDM() {
		this.countToDown();
		this.showTopAndButtom();
		this.callBack();
	}
	private callBack() {
		let model = MyCDM.instance;
		model.CsAuthRequestCallBack = () => {
			console.log("CsAuthRequestCallBack")
		}
		model.OnData11003 = (data: any) => {//告知服务器client可以开始了
			// 游戏开始逻辑
			this.nextG()
		}
		model.SendProcessData11010({
			processData: this.score,
		});
		model.OnData11010 = (data: any) => {//同步需要发送
			this.myAny = data.pcocessData
		};

		model.SendScoredData11011({
			score: this.score,
			resultData: []
		});
		model.OnData11011 = (data: any) => {
			this.score = data.score;
			this.myAny = data.resultData
		};
		model.OnData11012 = (data: any) => {
			//得到胜利玩家Id
			this.winId = data.winPlayerId;
			this.friendRank = data.friendRank;
			this.rank = data.rank;
			console.log("胜利玩家" + this.winId);
			console.log("返回通知" + data.result);
		};
		model.GetHighestScore11008();//查询玩家最高分
		model.OnData11008 = (data: any) => {
			this.weekScore = data.weekScore;
		};
	}
	private nextG() {
		this.addEventListener(egret.Event.ENTER_FRAME, this.runBg, this);//帧事件
		this.addOther();
		this.createQiuS();
		this.createQiuB();
		this.createQiuB1();
	}
	private showTopAndButtom() {
		let w = this.stage.stageWidth
		let h = this.stage.stageHeight
		let num = w / 154;//个数
		for (let i = 0; i < num; i++) {
			let img: eui.Image = new eui.Image("danjuchi_png");
			var rect: egret.Rectangle = new egret.Rectangle(22, 116, 136, 7);
			img.scale9Grid = rect;
			img.x = i * 154;
			img.y = 123;
			img.width = 154;
			img.height = 450;
			img.scaleY = -1
			this.topFather.addChild(img);
		}
		for (let i = 0; i < num; i++) {
			let img: eui.Image = new eui.Image("danjuchi_png");
			var rect: egret.Rectangle = new egret.Rectangle(22, 116, 136, 7);
			img.scale9Grid = rect;
			img.x = i * 154;
			img.width = 154;
			img.height = 450;
			img.y = 0;
			this.backFather.addChild(img);
		}

		if (w / h < 9 / 16) {
			this.blank = h - 1920;
			this.topFather.y = this.blank / 2;
			this.backFather.y = h - this.blank / 2 - 123;
			this.qiuS.y = this.backFather.y - 500;
		}
		else {
			this.topFather.y = 0;
			this.backFather.y = this.game.height - 123;
		}
	}
	private waitY = 0;
	//点击屏幕后
	private speedQius = 3;//绿球速度
	private flag = false;
	private setFlag(choose: boolean) {
		this.flag = choose;
	}
	private tailShow(jugde: number) {
		if (jugde == 0) {
			console.log("tailArray 显示 ")
			for (let i = 0; i < this.tailArray.length; i++) {
				this.tailArray[i].alpha = 1 - 0.1 * i;
				this.tailArray[i].scaleX = 0.45 - i * 0.06;
				this.tailArray[i].scaleY = 0.45 - i * 0.06;
				this.tailArray[i].y = 300 + 15 * i;

			}
		}
		else {
			console.log("tailArray 隐藏 ")
			for (let i = 0; i < this.tailArray.length; i++) {
				this.tailArray[i].alpha = 0;
			}
		}



	}
	private setClick() {
		if (!this.flag) {//this.flag == false  则返回
			return
		}
		this.setFlag(false);
		egret.Tween.removeTweens(this.qiuS);//停止下落
		this.sendChannel = this.sendAudio.play(0, 1);
		this.sendChannel.volume = 1;
		egret.Tween.get(this.tuowei).to({ height: 300 }, 150, egret.Ease.quadIn).call(() => { this.tailShow(0);console.log('showshow') });
		let tw = egret.Tween.get(this.qiuS, { onChange: this.crash, onChangeObj: this });//crash是实时变化，在里面所做动作记得removeTween。不让执行后续操作
		tw.to({ y: this.topFather.y + 200 }, 350, egret.Ease.quadIn)//quartIn   this.myT
			.call(() => {
				this.crashAfter(this.qiuS.x, this.qiuS.y);
			}, this)


	}
	// private  myT:(t: number) => number = this.acceleRator(3);//返回一个函数，调用myT的时候才调用闭包函数。
	private acceleRator(t: number) {
		//  return function (t) {
		console.log(t);//0 - 1的一个值
		return t / 9
		// };

	}

	private countToDown() {
		this.bgAll.touchEnabled = true;
		this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.setClick, this);
		console.log("countDown");
	}

	public backUI() {
		this.score = 0;
		this.health = 1;
		this.scoreBitLabel.text = this.score.toString();
		this.bg1.alpha = 0.5;
		this.bg2.alpha = 0.5;
	}
	//设置配置表   
	private static passID = 1;
	private DISTANCE: number[] = []
	private id = 1;
	private count_down = 0;
	private loadTable(passid: number) {
		if (passid > 20) {
			passid = 20;
		}

		let init = this.table[passid][xlsx.c_ydpz_distance]
		this.DISTANCE = JSON.parse(init);
		let tmpd = ZJ.MathUtil.randomRange(this.DISTANCE[0], this.DISTANCE[1] + 1);//返回min max中 随机数
		this.time = JSON.parse(this.table[passid][xlsx.c_ydpz_time]);
		this.disMax = this.DISTANCE[1];//距离最大值
		this.disMin = this.DISTANCE[0];//最小值
		this.timeMin = this.time[0];
		this.timeMax = this.time[1];
		this.countDown = this.table[passid][xlsx.c_ydpz_count_down];

		// egret.log("time: " + this.time)
		// egret.log("dis: " + this.disMin + " " + this.disMax)

		//下一关的配置
		let next = this.table[passid + 1][xlsx.c_ydpz_distance];
		this.nextDistance = JSON.parse(next);
		let temp = ZJ.MathUtil.randomRange(this.nextDistance[0], this.nextDistance[1] + 1);
		this.nextTime = JSON.parse(this.table[passid + 1][xlsx.c_ydpz_time]);
		this.nextDisMax = this.nextDistance[1];
		this.nextDisMin = this.nextDistance[0];
		this.nextTimeMax = this.nextTime[1];
		this.nextTimeMin = this.nextTime[0];
		this.nextCountDown = this.table[passid + 1][xlsx.c_ydpz_count_down];
	}

	private change() {
		this.smallX = this.qiuS.x;
		this.smallY = this.qiuS.y;

	}
	//创建绿色发射球
	private createQiuS() {
		if (this.isFirst) {
			this.qiuS.anchorOffsetX = this.qiuS.width / 2;
			this.qiuS.anchorOffsetY = this.qiuS.height / 2;
			this.qiuS.x = this.bgAll.width / 2;
			this.qiuS.y = this.qsY - 100;
			this.bgAll.addChild(this.qiuS);
			this.qiuS.addChild(this.tuowei);
			this.maskImg.width = this.qiuS.width;
			this.maskImg.height = this.qiuS.height;
			this.maskImg.alpha = 0;
			this.qiuS.addChild(this.maskImg);
			let width = this.qiuS.qiuS.width;
			let height = this.qiuS.qiuS.height;
			//添加球的动画数组
			for (let i = 0; i < this.tailArray.length; i++) {
				this.tailArray[i].anchorOffsetX = width / 2;
				this.tailArray[i].anchorOffsetY = height / 2;
				this.tailArray[i].x = width / 2;
				this.tailArray[i].alpha = 0;
				this.qiuS.addChild(this.tailArray[i]);
				console.log("创建" + i);
			}
			this.isFirst = false;
		}
		this.setFlag(true);//可以点击

		//这是绿色球碰到锯齿后  
		if (this.guanshu == 1) {
			this.isOnce = true;
			this.qiuS.y = this.qsY;
		}
		else {
			this.isOnce = false;
			egret.Tween.removeTweens(this.qiuS);
			this.maskImg.alpha = 1;
			egret.Tween.get(this.qiuS).to({ y: this.qsY }, this.runTime);
			egret.Tween.get(this.maskImg).to({ alpha: 0 }, this.runTime);

		}



	}
	private heightTothis: number = 0;
	//创建黄色球
	private createQiuB1() {
		if (this.guanshu == 1) {
			this.qiuB1.y = -1000;
		}
		this.qiuB1.anchorOffsetX = this.qiuB.width / 2;
		this.qiuB1.anchorOffsetY = this.qiuB.height / 2;
		this.bgAll.addChild(this.qiuB1);
		this.qiuB1.x = this.qiuB1.width;
		if (this.qiuB1.y < 0) {
			let nextMinY = this.qsY - this.qiuS.width / 2 - this.nextDisMin;//黄球1初始yMin
			let nextMaxY = this.qsY - this.qiuS.width / 2 - this.nextDisMax;//黄初始1yMax
			this.qby1 = nextMaxY + (this.nextDisMax - this.nextDisMin) * Math.random();//最终黄球1初始值
			//要第二关的关卡配置 
			this.heightTothis = this.bgAll.height - this.qsY;
			this.speed = Math.random() + 1;//来回的速度    通过这个修改动画
			this.qbTime1 = (this.nextTimeMin + (this.nextTimeMax - this.nextTimeMin) * Math.random()) / 2;//黄球运动半个来回的时间
			this.qiuB1.x = this.qiuB1.width;
			this.qbRunF(this.qiuB1, this.qbTime1, this.speed, );//左右
		}
		if (this.guanshu % 2 == 0) {
			this.qbRun(this.qiuB1, this.qbTime1, this.speed, );//左右
		}

	}
	private createQiuB() {
		this.qiuB.anchorOffsetX = this.qiuB.width / 2;
		this.qiuB.anchorOffsetY = this.qiuB.height / 2;
		this.bgAll.addChild(this.qiuB);
		//两个另起一段的动画会覆盖，要么remove，要么 to  call
		//以下做往返运动
		if (this.guanshu == 1) {
			let minY = this.qsY - this.qiuS.width / 2 - this.disMin;//黄球初始yMin
			let maxY = this.qsY - this.qiuS.width / 2 - this.disMax;//黄初始yMax
			this.qbY = maxY + (this.disMax - this.disMin) * Math.random();//最终黄球初始值
			this.heightTothis = this.bgAll.height - this.qsY;
			this.speed = Math.random() + 1;//来回的速度    通过这个修改动画
			this.qbTime = (this.timeMin + (this.timeMax - this.timeMin) * Math.random()) / 2;//黄球运动半个来回的时间
			this.qiuB.x = this.bgAll.width - this.qiuB.width;
			this.qiuB.y = this.qbY;
			this.qbRun(this.qiuB, this.qbTime, this.speed);//右左
		}
		else {
			if (this.qiuB.y < 0) {
				let minY = this.qsY - this.qiuS.width / 2 - this.nextDisMin;//黄球初始yMin
				let maxY = this.qsY - this.qiuS.width / 2 - this.nextDisMax;//黄初始yMax
				this.qbY = maxY + (this.nextDisMax - this.nextDisMin) * Math.random();//最终黄球初始值
				this.heightTothis = this.bgAll.height - this.qsY;
				this.speed = Math.random() + 1;//来回的速度    通过这个修改动画
				this.qbTime = (this.nextTimeMin + (this.nextTimeMax - this.nextTimeMin) * Math.random()) / 2;//黄球运动半个来回的时间
			}
			let i = Math.random();
			egret.Tween.removeTweens(this.qiuB);
			if (i > 0.5) {
				this.qbRunF(this.qiuB, this.qbTime, this.speed);//右左
			}
			else {
				this.qbRun(this.qiuB, this.qbTime, this.speed);
			}

		}

	}

	//设置黄色球运动速度的曲线
	private setPath(t: number): (t: number) => number {
		return egret.Ease.getPowInOut(2);//先固定有减速的。

	}
	//黄色球水平运动（left - right）左 - 右
	private qbRun(qb: QiuB, time: number, speed: number) {

		egret.Tween.get(qb, { onChange: this.runOnChange, onChangeObj: this })
			.to({ x: qb.width / 2 }, time, this.setPath(speed))
			.call(function () {
				egret.Tween.get(qb, { onChange: this.runOnChange, onChangeObj: this }).
					to({ x: this.bgAll.width - qb.width / 2 }, time, this.setPath(speed))
					.call(function () {
						qb.x = this.bgAll.width - qb.width / 2;
						this.qbRun(qb, time, this.speed);
					}, this)
			}, this)
	}
	//黄色球水平运动（right - left）右 - 左
	private qbRunF(qb: QiuB, time: number, speed: number) {
		egret.Tween.get(qb, { onChange: this.runOnChange, onChangeObj: this })
			.to({ x: this.bgAll.width - qb.width / 2 }, time, this.setPath(speed))
			.call(function () {
				egret.Tween.get(qb, { onChange: this.runOnChange, onChangeObj: this }).
					to({ x: this.qiuB.width / 2 }, time, this.setPath(speed))
					.call(function () {
						qb.x = qb.width / 2;
						this.qbRunF(qb, time, this.speed);
					}, this)
			}, this)
	}


	//碰撞到上下边后
	private crashAfter(aX: number, aY: number) {
		egret.Tween.removeAllTweens();
		egret.Tween.get(this.tuowei).to({ height: 134 }, 0);
		this.tailShow(1);
		this.deathChannel = this.deathAudio.play(0, 1);
		this.deathChannel.volume = 1;
		this.sendChannel.stop();
		this.guanshu = 1;
		this.loadTable(this.guanshu);
		this.health--;
		this.ls.x = aX;
		this.ls.y = aY;
		this.ls.animation.play("", 1);
		this.bgAll.addChild(this.ls);
		//同步分数    最高分没有从服务器得到
		MyCDM.instance.SendScoredData11011(
			{
				score: this.score,
				resultData: []
			});
		if (this.health == 0) {
			this.qiuB.alpha = 0;
			this.qiuS.alpha = 0;
			this.scoreBitLabel.alpha = 0;
			MyCDM.instance.SendGameResult11012({
				winPlayerId: this.winId,
			});
			ZJ.UIManager.instance.openView(UIName.Settle).setData({
				score: this.score,//本次得分
				weekScore: this.weekScore,//本周最佳得分
				rank: this.rank,
				friendRank: this.friendRank
			})


		}
		this.nextG();
	}

	//两球碰撞
	private crash() {
		let a = this.qiuB.width / 2 + this.qiuS.width / 2;
		let b = this.qiuB1.width / 2 + this.qiuS.width / 2;
		let distance = Math.sqrt(Math.pow(this.qiuS.y - this.Y, 2) + Math.pow(this.qiuS.x - this.X, 2));
		let distance1 = Math.sqrt(Math.pow(this.qiuS.y - this.Y1, 2) + Math.pow(this.qiuS.x - this.X1, 2));
		if (distance <= a || distance1 <= b) {
			let skewing = Math.abs(this.qiuB.x - this.qiuS.x);
			let ske = Math.abs(this.qiuB1.x - this.qiuS.x);
			if (this.isOnce) {
				if (skewing <= this.qiuS.width * 0.025 || ske <= this.qiuS.width * 0.025) {
					this.score += 5;
					console.log("加5分");
					this.comboChannel = this.comboAudio.play(0, 1);
					this.comboChannel.volume = 1;
					this.sendChannel.stop();
					this.startGroup.alpha = 1;
					egret.setTimeout(function () {
						this.startGroup.alpha = 0;
					}, this, 800);
					this.continuePerfect++;
				}
				else {
					this.continuePerfect = 0;
				}
				egret.Tween.removeTweens(this.tuowei)
	         	this.tuowei.height = 134
			}
			else {
				if (skewing <= this.qiuS.width * 0.025 || ske <= this.qiuS.width * 0.025) {
					this.score += 3;
					console.log("加3分");
					this.hitGroup.alpha = 1;
					egret.setTimeout(function () {
						this.hitGroup.alpha = 0;
					}, this, 800);
					this.continuePerfect++;
					this.comboChannel = this.comboAudio.play(0, 1);
					this.sendChannel.stop();
					if (this.continuePerfect >= 2) {
						let combo = this.continuePerfect - 1;
						let comboScore = combo * 1;
						this.score += comboScore;
						//
						this.comboNum.text = comboScore.toString();
						this.comboGroups.alpha = 1;
						this.hitGroup.alpha = 0;
						this.startGroup.alpha = 0;
						egret.setTimeout(function () {
							this.comboGroups.alpha = 0;
						}, this, 800);

					}
				}
				else {
					this.continuePerfect = 0;
				}
				egret.Tween.removeTweens(this.tuowei)
		        this.tuowei.height = 134
			}
			this.collisionChannel = this.collisionAudion.play(0, 1);
			this.collisionChannel.volume = 0.75;
			this.sendChannel.stop();
			this.score += 1;
			this.guanshu++;
			this.scoreBitLabel.text = this.score.toString();
			this.loadTable(this.guanshu);//加载
			//爆炸后转换球
			this.jugdeBallQB();
			egret.Tween.removeTweens(this.qiuS);//停止动画
			MyCDM.instance.SendProcessData11010({
				processData: this.score,
			});
			this.tailShow(1);
			this.createQiuS();
		}
	}

	private jugdeBallQB() {
		this.resource.animation.play("", 1);
		this.isRun = true;
		egret.setTimeout(() => { this.isRun = false }, this, this.runTime);
		if (this.qiuB.y > 0)//知道黄1 在下面    换到上面
		{
			this.resource.x = this.X;
			this.resource.y = this.Y;
			this.bgAll.addChild(this.resource);
			this.qiuB.y = -1000;
			egret.Tween.removeTweens(this.qiuB);//动画不停止不行
			this.createQiuB();//重新创建动画
			egret.Tween.get(this.qiuB1).to({ y: this.qby1 }, this.runTime, egret.Ease.quartOut).call(() => {
				this.qiuB1.y = this.qby1;
				egret.Tween.get(this.qiuB1).to({ y: this.qby1 + this.heightTothis }, this.countDown);

				egret.Tween.get(this.qiuS, { onChange: this.change, onChangeObj: this })
					.to({ y: this.backFather.y - this.qiuS.width / 2 }, this.countDown).call(() => {
						this.crashAfter(this.qiuS.x, this.backFather.y - this.qiuS.width / 2);//碰到上下边
					}, this);
			});
		}
		else if (this.qiuB.y <= 0)//黄2 在下面    
		{
			this.resource.x = this.X1;
			this.resource.y = this.Y1;
			this.bgAll.addChild(this.resource);

			this.qiuB1.y = -1000;
			egret.Tween.removeTweens(this.qiuB1);
			this.createQiuB1();

			egret.Tween.get(this.qiuB).to({ y: this.qbY }, this.runTime, egret.Ease.quartOut).call(() => {
				this.qiuB.y = this.qbY;
				egret.Tween.get(this.qiuB).to({ y: this.qbY + this.heightTothis }, this.countDown);
				egret.Tween.get(this.qiuS, { onChange: this.change, onChangeObj: this })
					.to({ y: this.backFather.y - this.qiuS.width / 2 }, this.countDown).call(() => {
						this.crashAfter(this.qiuS.x, this.backFather.y - this.qiuS.width / 2);//碰到上下边
					}, this);
			});

		}

	}
	//背景运动
	private runBg() {
		if (!this.isRun) {
			this.bg1.y += 1;
			this.bg2.y += 1;
		}
		else {
			this.bg1.y += 50;
			this.bg2.y += 50;

		}

		if (this.bg1.y >= this.stage.stageHeight) {
			this.bg1.y = this.bg2.y - 2340;
		} else if (this.bg2.y >= this.stage.stageHeight) {
			this.bg2.y = this.bg1.y - 2340;
		}
	}
	//下一关
	private addOther() {
		this.bgAll.addChild(this.scoreBitLabel);
		this.scoreBitLabel.text = this.score.toString();

	}


}