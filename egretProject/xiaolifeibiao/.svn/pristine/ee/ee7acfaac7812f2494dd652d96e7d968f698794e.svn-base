%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.3
-module(p10).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("p10.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type cs_10004() :: #cs_10004{}.
-type cs_10011() :: #cs_10011{}.
-type cs_10010() :: #cs_10010{}.
-type cs_10000() :: #cs_10000{}.
-type sc_10011() :: #sc_10011{}.
-type sc_10001() :: #sc_10001{}.
-type cs_10002() :: #cs_10002{}.
-type cs_10001() :: #cs_10001{}.
-type sc_10010() :: #sc_10010{}.
-type sc_10002() :: #sc_10002{}.
-type sc_10003() :: #sc_10003{}.
-type sc_10000() :: #sc_10000{}.
-export_type(['cs_10004'/0, 'cs_10011'/0, 'cs_10010'/0, 'cs_10000'/0, 'sc_10011'/0, 'sc_10001'/0, 'cs_10002'/0, 'cs_10001'/0, 'sc_10010'/0, 'sc_10002'/0, 'sc_10003'/0, 'sc_10000'/0]).

-spec encode_msg(#cs_10004{} | #cs_10011{} | #cs_10010{} | #cs_10000{} | #sc_10011{} | #sc_10001{} | #cs_10002{} | #cs_10001{} | #sc_10010{} | #sc_10002{} | #sc_10003{} | #sc_10000{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#cs_10004{} | #cs_10011{} | #cs_10010{} | #cs_10000{} | #sc_10011{} | #sc_10001{} | #cs_10002{} | #cs_10001{} | #sc_10010{} | #sc_10002{} | #sc_10003{} | #sc_10000{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #cs_10004{} -> e_msg_cs_10004(Msg, TrUserData);
      #cs_10011{} -> e_msg_cs_10011(Msg, TrUserData);
      #cs_10010{} -> e_msg_cs_10010(Msg, TrUserData);
      #cs_10000{} -> e_msg_cs_10000(Msg, TrUserData);
      #sc_10011{} -> e_msg_sc_10011(Msg, TrUserData);
      #sc_10001{} -> e_msg_sc_10001(Msg, TrUserData);
      #cs_10002{} -> e_msg_cs_10002(Msg, TrUserData);
      #cs_10001{} -> e_msg_cs_10001(Msg, TrUserData);
      #sc_10010{} -> e_msg_sc_10010(Msg, TrUserData);
      #sc_10002{} -> e_msg_sc_10002(Msg, TrUserData);
      #sc_10003{} -> e_msg_sc_10003(Msg, TrUserData);
      #sc_10000{} -> e_msg_sc_10000(Msg, TrUserData)
    end.



e_msg_cs_10004(_Msg, _TrUserData) -> <<>>.

e_msg_cs_10011(Msg, TrUserData) ->
    e_msg_cs_10011(Msg, <<>>, TrUserData).


e_msg_cs_10011(#cs_10011{resultData = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bytes(TrF1, <<Bin/binary, 18>>)
    end.

e_msg_cs_10010(Msg, TrUserData) ->
    e_msg_cs_10010(Msg, <<>>, TrUserData).


e_msg_cs_10010(#cs_10010{processData = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bytes(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_cs_10000(Msg, TrUserData) ->
    e_msg_cs_10000(Msg, <<>>, TrUserData).


e_msg_cs_10000(#cs_10000{openId = F1, nickname = F2,
			 avatarUrl = F3, sign = F4, timestamp = F5},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>)
    end.

e_msg_sc_10011(Msg, TrUserData) ->
    e_msg_sc_10011(Msg, <<>>, TrUserData).


e_msg_sc_10011(#sc_10011{playerId = F1, resultData = F2,
			 seeds = F3},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int64(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true -> e_field_sc_10011_seeds(TrF3, B2, TrUserData)
      end
    end.

e_msg_sc_10001(Msg, TrUserData) ->
    e_msg_sc_10001(Msg, <<>>, TrUserData).


e_msg_sc_10001(#sc_10001{result = F1, roomId = F2,
			 matchId = F3},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int64(TrF2, <<B1/binary, 16>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>)
    end.

e_msg_cs_10002(_Msg, _TrUserData) -> <<>>.

e_msg_cs_10001(Msg, TrUserData) ->
    e_msg_cs_10001(Msg, <<>>, TrUserData).


e_msg_cs_10001(#cs_10001{matchId = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_sc_10010(Msg, TrUserData) ->
    e_msg_sc_10010(Msg, <<>>, TrUserData).


e_msg_sc_10010(#sc_10010{playerId = F1,
			 processData = F2},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int64(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bytes(TrF2, <<B1/binary, 18>>)
    end.

e_msg_sc_10002(Msg, TrUserData) ->
    e_msg_sc_10002(Msg, <<>>, TrUserData).


e_msg_sc_10002(#sc_10002{result = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_sc_10003(Msg, TrUserData) ->
    e_msg_sc_10003(Msg, <<>>, TrUserData).


e_msg_sc_10003(#sc_10003{readyTime = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_sc_10000(Msg, TrUserData) ->
    e_msg_sc_10000(Msg, <<>>, TrUserData).


e_msg_sc_10000(#sc_10000{result = F1, playerId = F2},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int64(TrF2, <<B1/binary, 16>>)
    end.

e_field_sc_10011_seeds([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 24>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2),
    e_field_sc_10011_seeds(Rest, Bin3, TrUserData);
e_field_sc_10011_seeds([], Bin, _TrUserData) -> Bin.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      cs_10004 ->
	  try d_msg_cs_10004(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_10004, {Class, Reason, StackTrace}}}})
	  end;
      cs_10011 ->
	  try d_msg_cs_10011(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_10011, {Class, Reason, StackTrace}}}})
	  end;
      cs_10010 ->
	  try d_msg_cs_10010(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_10010, {Class, Reason, StackTrace}}}})
	  end;
      cs_10000 ->
	  try d_msg_cs_10000(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_10000, {Class, Reason, StackTrace}}}})
	  end;
      sc_10011 ->
	  try d_msg_sc_10011(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_10011, {Class, Reason, StackTrace}}}})
	  end;
      sc_10001 ->
	  try d_msg_sc_10001(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_10001, {Class, Reason, StackTrace}}}})
	  end;
      cs_10002 ->
	  try d_msg_cs_10002(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_10002, {Class, Reason, StackTrace}}}})
	  end;
      cs_10001 ->
	  try d_msg_cs_10001(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cs_10001, {Class, Reason, StackTrace}}}})
	  end;
      sc_10010 ->
	  try d_msg_sc_10010(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_10010, {Class, Reason, StackTrace}}}})
	  end;
      sc_10002 ->
	  try d_msg_sc_10002(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_10002, {Class, Reason, StackTrace}}}})
	  end;
      sc_10003 ->
	  try d_msg_sc_10003(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_10003, {Class, Reason, StackTrace}}}})
	  end;
      sc_10000 ->
	  try d_msg_sc_10000(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sc_10000, {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_cs_10004(Bin, TrUserData) ->
    dfp_read_field_def_cs_10004(Bin, 0, 0, TrUserData).

dfp_read_field_def_cs_10004(<<>>, 0, 0, _) ->
    #cs_10004{};
dfp_read_field_def_cs_10004(Other, Z1, Z2,
			    TrUserData) ->
    dg_read_field_def_cs_10004(Other, Z1, Z2, TrUserData).

dg_read_field_def_cs_10004(<<1:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_10004(Rest, N + 7, X bsl N + Acc,
			       TrUserData);
dg_read_field_def_cs_10004(<<0:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_cs_10004(Rest, 0, 0, TrUserData);
      1 -> skip_64_cs_10004(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_cs_10004(Rest, 0, 0, TrUserData);
      3 ->
	  skip_group_cs_10004(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_cs_10004(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_cs_10004(<<>>, 0, 0, _) ->
    #cs_10004{}.

skip_varint_cs_10004(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    skip_varint_cs_10004(Rest, Z1, Z2, TrUserData);
skip_varint_cs_10004(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_cs_10004(Rest, Z1, Z2, TrUserData).

skip_length_delimited_cs_10004(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_10004(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
skip_length_delimited_cs_10004(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_10004(Rest2, 0, 0, TrUserData).

skip_group_cs_10004(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_10004(Rest, 0, Z2, TrUserData).

skip_32_cs_10004(<<_:32, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_10004(Rest, Z1, Z2, TrUserData).

skip_64_cs_10004(<<_:64, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_10004(Rest, Z1, Z2, TrUserData).

d_msg_cs_10011(Bin, TrUserData) ->
    dfp_read_field_def_cs_10011(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_cs_10011(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_cs_10011_resultData(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_cs_10011(<<>>, 0, 0, F@_1, _) ->
    #cs_10011{resultData = F@_1};
dfp_read_field_def_cs_10011(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_cs_10011(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_cs_10011(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_10011(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_cs_10011(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  d_field_cs_10011_resultData(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_cs_10011(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_cs_10011(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_cs_10011(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_cs_10011(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_cs_10011(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_cs_10011(<<>>, 0, 0, F@_1, _) ->
    #cs_10011{resultData = F@_1}.

d_field_cs_10011_resultData(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_cs_10011_resultData(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_cs_10011_resultData(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_cs_10011(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_cs_10011(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_cs_10011(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_cs_10011(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_cs_10011(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_cs_10011(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_10011(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_cs_10011(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_10011(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_cs_10011(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_10011(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_cs_10011(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_cs_10011(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_cs_10011(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_cs_10011(Rest, Z1, Z2, F@_1,
				TrUserData).

d_msg_cs_10010(Bin, TrUserData) ->
    dfp_read_field_def_cs_10010(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_cs_10010(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_cs_10010_processData(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_cs_10010(<<>>, 0, 0, F@_1, _) ->
    #cs_10010{processData = F@_1};
dfp_read_field_def_cs_10010(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_cs_10010(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_cs_10010(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_10010(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_cs_10010(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_cs_10010_processData(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_cs_10010(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_cs_10010(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_cs_10010(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_cs_10010(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_cs_10010(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_cs_10010(<<>>, 0, 0, F@_1, _) ->
    #cs_10010{processData = F@_1}.

d_field_cs_10010_processData(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_cs_10010_processData(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_cs_10010_processData(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_cs_10010(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_cs_10010(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_cs_10010(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_cs_10010(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_cs_10010(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_cs_10010(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_10010(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_cs_10010(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_10010(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_cs_10010(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_10010(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_cs_10010(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_cs_10010(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_cs_10010(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_cs_10010(Rest, Z1, Z2, F@_1,
				TrUserData).

d_msg_cs_10000(Bin, TrUserData) ->
    dfp_read_field_def_cs_10000(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_cs_10000(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_cs_10000_openId(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_cs_10000(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_cs_10000_nickname(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_cs_10000(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_cs_10000_avatarUrl(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_cs_10000(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_cs_10000_sign(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_cs_10000(<<40, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_cs_10000_timestamp(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_cs_10000(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, _) ->
    #cs_10000{openId = F@_1, nickname = F@_2,
	      avatarUrl = F@_3, sign = F@_4, timestamp = F@_5};
dfp_read_field_def_cs_10000(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_cs_10000(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_cs_10000(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_10000(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_cs_10000(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_cs_10000_openId(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      18 ->
	  d_field_cs_10000_nickname(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      26 ->
	  d_field_cs_10000_avatarUrl(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      34 ->
	  d_field_cs_10000_sign(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      40 ->
	  d_field_cs_10000_timestamp(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_cs_10000(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
	    1 ->
		skip_64_cs_10000(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData);
	    2 ->
		skip_length_delimited_cs_10000(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_cs_10000(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_cs_10000(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData)
	  end
    end;
dg_read_field_def_cs_10000(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    #cs_10000{openId = F@_1, nickname = F@_2,
	      avatarUrl = F@_3, sign = F@_4, timestamp = F@_5}.

d_field_cs_10000_openId(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_cs_10000_openId(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_cs_10000_openId(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_cs_10000(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_cs_10000_nickname(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_cs_10000_nickname(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_cs_10000_nickname(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_cs_10000(RestF, 0, 0, F@_1,
				NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_cs_10000_avatarUrl(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_cs_10000_avatarUrl(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_cs_10000_avatarUrl(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_cs_10000(RestF, 0, 0, F@_1, F@_2,
				NewFValue, F@_4, F@_5, TrUserData).

d_field_cs_10000_sign(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_cs_10000_sign(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_cs_10000_sign(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_cs_10000(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, F@_5, TrUserData).

d_field_cs_10000_timestamp(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_cs_10000_timestamp(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_cs_10000_timestamp(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_cs_10000(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, NewFValue, TrUserData).

skip_varint_cs_10000(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_cs_10000(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
skip_varint_cs_10000(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_cs_10000(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_cs_10000(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_10000(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
skip_length_delimited_cs_10000(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_10000(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_group_cs_10000(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_10000(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_32_cs_10000(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_cs_10000(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_64_cs_10000(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_cs_10000(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

d_msg_sc_10011(Bin, TrUserData) ->
    dfp_read_field_def_sc_10011(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), id([], TrUserData),
				TrUserData).

dfp_read_field_def_sc_10011(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_sc_10011_playerId(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_sc_10011(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_sc_10011_resultData(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_sc_10011(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_pfield_sc_10011_seeds(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_sc_10011(<<24, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_sc_10011_seeds(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_sc_10011(<<>>, 0, 0, F@_1, F@_2, R1,
			    TrUserData) ->
    #sc_10011{playerId = F@_1, resultData = F@_2,
	      seeds = lists_reverse(R1, TrUserData)};
dfp_read_field_def_sc_10011(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_sc_10011(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_sc_10011(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_10011(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_sc_10011(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_10011_playerId(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      18 ->
	  d_field_sc_10011_resultData(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      26 ->
	  d_pfield_sc_10011_seeds(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      24 ->
	  d_field_sc_10011_seeds(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_sc_10011(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_sc_10011(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_sc_10011(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_sc_10011(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_sc_10011(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_sc_10011(<<>>, 0, 0, F@_1, F@_2, R1,
			   TrUserData) ->
    #sc_10011{playerId = F@_1, resultData = F@_2,
	      seeds = lists_reverse(R1, TrUserData)}.

d_field_sc_10011_playerId(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_sc_10011_playerId(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_sc_10011_playerId(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_10011(RestF, 0, 0, NewFValue,
				F@_2, F@_3, TrUserData).

d_field_sc_10011_resultData(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_sc_10011_resultData(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_sc_10011_resultData(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_sc_10011(RestF, 0, 0, F@_1,
				NewFValue, F@_3, TrUserData).

d_field_sc_10011_seeds(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_sc_10011_seeds(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_sc_10011_seeds(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_10011(RestF, 0, 0, F@_1, F@_2,
				cons(NewFValue, Prev, TrUserData), TrUserData).

d_pfield_sc_10011_seeds(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_pfield_sc_10011_seeds(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_pfield_sc_10011_seeds(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_sc_10011_seeds(PackedBytes, 0,
					   0, E),
    dfp_read_field_def_sc_10011(Rest2, 0, 0, F@_1, F@_2,
				NewSeq, TrUserData).

d_packed_field_sc_10011_seeds(<<1:1, X:7, Rest/binary>>,
			      N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_sc_10011_seeds(Rest, N + 7,
				  X bsl N + Acc, AccSeq);
d_packed_field_sc_10011_seeds(<<0:1, X:7, Rest/binary>>,
			      N, Acc, AccSeq) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    d_packed_field_sc_10011_seeds(RestF, 0, 0,
				  [NewFValue | AccSeq]);
d_packed_field_sc_10011_seeds(<<>>, 0, 0, AccSeq) ->
    AccSeq.

skip_varint_sc_10011(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_sc_10011(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_sc_10011(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_sc_10011(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_sc_10011(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_10011(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_sc_10011(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_10011(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_sc_10011(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_10011(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_sc_10011(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_sc_10011(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_sc_10011(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_sc_10011(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

d_msg_sc_10001(Bin, TrUserData) ->
    dfp_read_field_def_sc_10001(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_10001(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_sc_10001_result(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_sc_10001(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_sc_10001_roomId(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_sc_10001(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_sc_10001_matchId(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_sc_10001(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #sc_10001{result = F@_1, roomId = F@_2, matchId = F@_3};
dfp_read_field_def_sc_10001(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_sc_10001(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_sc_10001(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_10001(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_sc_10001(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_10001_result(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      16 ->
	  d_field_sc_10001_roomId(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      26 ->
	  d_field_sc_10001_matchId(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_sc_10001(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_sc_10001(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_sc_10001(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_sc_10001(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_sc_10001(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_sc_10001(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #sc_10001{result = F@_1, roomId = F@_2, matchId = F@_3}.

d_field_sc_10001_result(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_sc_10001_result(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_sc_10001_result(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_10001(RestF, 0, 0, NewFValue,
				F@_2, F@_3, TrUserData).

d_field_sc_10001_roomId(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_sc_10001_roomId(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_sc_10001_roomId(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_10001(RestF, 0, 0, F@_1,
				NewFValue, F@_3, TrUserData).

d_field_sc_10001_matchId(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_sc_10001_matchId(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_sc_10001_matchId(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_sc_10001(RestF, 0, 0, F@_1, F@_2,
				NewFValue, TrUserData).

skip_varint_sc_10001(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_sc_10001(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_sc_10001(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_sc_10001(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_sc_10001(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_10001(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_sc_10001(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_10001(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_sc_10001(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_10001(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_sc_10001(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_sc_10001(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_sc_10001(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_sc_10001(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

d_msg_cs_10002(Bin, TrUserData) ->
    dfp_read_field_def_cs_10002(Bin, 0, 0, TrUserData).

dfp_read_field_def_cs_10002(<<>>, 0, 0, _) ->
    #cs_10002{};
dfp_read_field_def_cs_10002(Other, Z1, Z2,
			    TrUserData) ->
    dg_read_field_def_cs_10002(Other, Z1, Z2, TrUserData).

dg_read_field_def_cs_10002(<<1:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_10002(Rest, N + 7, X bsl N + Acc,
			       TrUserData);
dg_read_field_def_cs_10002(<<0:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_cs_10002(Rest, 0, 0, TrUserData);
      1 -> skip_64_cs_10002(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_cs_10002(Rest, 0, 0, TrUserData);
      3 ->
	  skip_group_cs_10002(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_cs_10002(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_cs_10002(<<>>, 0, 0, _) ->
    #cs_10002{}.

skip_varint_cs_10002(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    skip_varint_cs_10002(Rest, Z1, Z2, TrUserData);
skip_varint_cs_10002(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_cs_10002(Rest, Z1, Z2, TrUserData).

skip_length_delimited_cs_10002(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_10002(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
skip_length_delimited_cs_10002(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_10002(Rest2, 0, 0, TrUserData).

skip_group_cs_10002(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_10002(Rest, 0, Z2, TrUserData).

skip_32_cs_10002(<<_:32, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_10002(Rest, Z1, Z2, TrUserData).

skip_64_cs_10002(<<_:64, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_cs_10002(Rest, Z1, Z2, TrUserData).

d_msg_cs_10001(Bin, TrUserData) ->
    dfp_read_field_def_cs_10001(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_cs_10001(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_cs_10001_matchId(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_cs_10001(<<>>, 0, 0, F@_1, _) ->
    #cs_10001{matchId = F@_1};
dfp_read_field_def_cs_10001(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_cs_10001(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_cs_10001(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cs_10001(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_cs_10001(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_cs_10001_matchId(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_cs_10001(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_cs_10001(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_cs_10001(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_cs_10001(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_cs_10001(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_cs_10001(<<>>, 0, 0, F@_1, _) ->
    #cs_10001{matchId = F@_1}.

d_field_cs_10001_matchId(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_cs_10001_matchId(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_cs_10001_matchId(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_cs_10001(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_cs_10001(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_cs_10001(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_cs_10001(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_cs_10001(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_cs_10001(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_cs_10001(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_cs_10001(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cs_10001(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_cs_10001(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cs_10001(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_cs_10001(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_cs_10001(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_cs_10001(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_cs_10001(Rest, Z1, Z2, F@_1,
				TrUserData).

d_msg_sc_10010(Bin, TrUserData) ->
    dfp_read_field_def_sc_10010(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_10010(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_sc_10010_playerId(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_sc_10010(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_sc_10010_processData(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_sc_10010(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #sc_10010{playerId = F@_1, processData = F@_2};
dfp_read_field_def_sc_10010(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_sc_10010(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_sc_10010(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_10010(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_sc_10010(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_10010_playerId(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_sc_10010_processData(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_sc_10010(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_sc_10010(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_sc_10010(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_sc_10010(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_sc_10010(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_sc_10010(<<>>, 0, 0, F@_1, F@_2, _) ->
    #sc_10010{playerId = F@_1, processData = F@_2}.

d_field_sc_10010_playerId(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_sc_10010_playerId(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_sc_10010_playerId(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_10010(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_sc_10010_processData(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_sc_10010_processData(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_sc_10010_processData(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_sc_10010(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_sc_10010(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_sc_10010(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_sc_10010(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_sc_10010(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_sc_10010(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_10010(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_sc_10010(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_10010(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_sc_10010(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_10010(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_sc_10010(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_sc_10010(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_sc_10010(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_sc_10010(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

d_msg_sc_10002(Bin, TrUserData) ->
    dfp_read_field_def_sc_10002(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_10002(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_sc_10002_result(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_sc_10002(<<>>, 0, 0, F@_1, _) ->
    #sc_10002{result = F@_1};
dfp_read_field_def_sc_10002(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_sc_10002(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_sc_10002(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_10002(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_sc_10002(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_10002_result(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_sc_10002(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_sc_10002(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_sc_10002(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_sc_10002(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_sc_10002(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_sc_10002(<<>>, 0, 0, F@_1, _) ->
    #sc_10002{result = F@_1}.

d_field_sc_10002_result(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_sc_10002_result(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_sc_10002_result(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_10002(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_sc_10002(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_sc_10002(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_sc_10002(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_sc_10002(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_sc_10002(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_10002(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_sc_10002(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_10002(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_sc_10002(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_10002(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_sc_10002(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_sc_10002(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_sc_10002(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_sc_10002(Rest, Z1, Z2, F@_1,
				TrUserData).

d_msg_sc_10003(Bin, TrUserData) ->
    dfp_read_field_def_sc_10003(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_10003(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_sc_10003_readyTime(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_sc_10003(<<>>, 0, 0, F@_1, _) ->
    #sc_10003{readyTime = F@_1};
dfp_read_field_def_sc_10003(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_sc_10003(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_sc_10003(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_10003(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_sc_10003(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_10003_readyTime(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_sc_10003(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_sc_10003(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_sc_10003(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_sc_10003(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_sc_10003(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_sc_10003(<<>>, 0, 0, F@_1, _) ->
    #sc_10003{readyTime = F@_1}.

d_field_sc_10003_readyTime(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_sc_10003_readyTime(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_sc_10003_readyTime(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_10003(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_sc_10003(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_sc_10003(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_sc_10003(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_sc_10003(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_sc_10003(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_10003(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_sc_10003(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_10003(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_sc_10003(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_10003(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_sc_10003(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_sc_10003(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_sc_10003(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_sc_10003(Rest, Z1, Z2, F@_1,
				TrUserData).

d_msg_sc_10000(Bin, TrUserData) ->
    dfp_read_field_def_sc_10000(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_sc_10000(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_sc_10000_result(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_sc_10000(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_sc_10000_playerId(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_sc_10000(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #sc_10000{result = F@_1, playerId = F@_2};
dfp_read_field_def_sc_10000(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_sc_10000(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_sc_10000(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sc_10000(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_sc_10000(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_sc_10000_result(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      16 ->
	  d_field_sc_10000_playerId(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_sc_10000(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_sc_10000(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_sc_10000(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_sc_10000(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_sc_10000(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_sc_10000(<<>>, 0, 0, F@_1, F@_2, _) ->
    #sc_10000{result = F@_1, playerId = F@_2}.

d_field_sc_10000_result(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_sc_10000_result(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_sc_10000_result(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_10000(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_sc_10000_playerId(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_sc_10000_playerId(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_sc_10000_playerId(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_sc_10000(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_sc_10000(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_sc_10000(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_sc_10000(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_sc_10000(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_sc_10000(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_sc_10000(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_sc_10000(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sc_10000(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_sc_10000(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sc_10000(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_sc_10000(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_sc_10000(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_sc_10000(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_sc_10000(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #cs_10004{} ->
	  merge_msg_cs_10004(Prev, New, TrUserData);
      #cs_10011{} ->
	  merge_msg_cs_10011(Prev, New, TrUserData);
      #cs_10010{} ->
	  merge_msg_cs_10010(Prev, New, TrUserData);
      #cs_10000{} ->
	  merge_msg_cs_10000(Prev, New, TrUserData);
      #sc_10011{} ->
	  merge_msg_sc_10011(Prev, New, TrUserData);
      #sc_10001{} ->
	  merge_msg_sc_10001(Prev, New, TrUserData);
      #cs_10002{} ->
	  merge_msg_cs_10002(Prev, New, TrUserData);
      #cs_10001{} ->
	  merge_msg_cs_10001(Prev, New, TrUserData);
      #sc_10010{} ->
	  merge_msg_sc_10010(Prev, New, TrUserData);
      #sc_10002{} ->
	  merge_msg_sc_10002(Prev, New, TrUserData);
      #sc_10003{} ->
	  merge_msg_sc_10003(Prev, New, TrUserData);
      #sc_10000{} -> merge_msg_sc_10000(Prev, New, TrUserData)
    end.

merge_msg_cs_10004(_Prev, New, _TrUserData) -> New.

merge_msg_cs_10011(#cs_10011{},
		   #cs_10011{resultData = NFresultData}, _) ->
    #cs_10011{resultData = NFresultData}.

merge_msg_cs_10010(#cs_10010{},
		   #cs_10010{processData = NFprocessData}, _) ->
    #cs_10010{processData = NFprocessData}.

merge_msg_cs_10000(#cs_10000{},
		   #cs_10000{openId = NFopenId, nickname = NFnickname,
			     avatarUrl = NFavatarUrl, sign = NFsign,
			     timestamp = NFtimestamp},
		   _) ->
    #cs_10000{openId = NFopenId, nickname = NFnickname,
	      avatarUrl = NFavatarUrl, sign = NFsign,
	      timestamp = NFtimestamp}.

merge_msg_sc_10011(#sc_10011{seeds = PFseeds},
		   #sc_10011{playerId = NFplayerId,
			     resultData = NFresultData, seeds = NFseeds},
		   TrUserData) ->
    #sc_10011{playerId = NFplayerId,
	      resultData = NFresultData,
	      seeds =
		  if PFseeds /= undefined, NFseeds /= undefined ->
			 'erlang_++'(PFseeds, NFseeds, TrUserData);
		     PFseeds == undefined -> NFseeds;
		     NFseeds == undefined -> PFseeds
		  end}.

merge_msg_sc_10001(#sc_10001{},
		   #sc_10001{result = NFresult, roomId = NFroomId,
			     matchId = NFmatchId},
		   _) ->
    #sc_10001{result = NFresult, roomId = NFroomId,
	      matchId = NFmatchId}.

merge_msg_cs_10002(_Prev, New, _TrUserData) -> New.

merge_msg_cs_10001(#cs_10001{},
		   #cs_10001{matchId = NFmatchId}, _) ->
    #cs_10001{matchId = NFmatchId}.

merge_msg_sc_10010(#sc_10010{},
		   #sc_10010{playerId = NFplayerId,
			     processData = NFprocessData},
		   _) ->
    #sc_10010{playerId = NFplayerId,
	      processData = NFprocessData}.

merge_msg_sc_10002(#sc_10002{},
		   #sc_10002{result = NFresult}, _) ->
    #sc_10002{result = NFresult}.

merge_msg_sc_10003(#sc_10003{},
		   #sc_10003{readyTime = NFreadyTime}, _) ->
    #sc_10003{readyTime = NFreadyTime}.

merge_msg_sc_10000(#sc_10000{},
		   #sc_10000{result = NFresult, playerId = NFplayerId},
		   _) ->
    #sc_10000{result = NFresult, playerId = NFplayerId}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #cs_10004{} ->
	  v_msg_cs_10004(Msg, [cs_10004], TrUserData);
      #cs_10011{} ->
	  v_msg_cs_10011(Msg, [cs_10011], TrUserData);
      #cs_10010{} ->
	  v_msg_cs_10010(Msg, [cs_10010], TrUserData);
      #cs_10000{} ->
	  v_msg_cs_10000(Msg, [cs_10000], TrUserData);
      #sc_10011{} ->
	  v_msg_sc_10011(Msg, [sc_10011], TrUserData);
      #sc_10001{} ->
	  v_msg_sc_10001(Msg, [sc_10001], TrUserData);
      #cs_10002{} ->
	  v_msg_cs_10002(Msg, [cs_10002], TrUserData);
      #cs_10001{} ->
	  v_msg_cs_10001(Msg, [cs_10001], TrUserData);
      #sc_10010{} ->
	  v_msg_sc_10010(Msg, [sc_10010], TrUserData);
      #sc_10002{} ->
	  v_msg_sc_10002(Msg, [sc_10002], TrUserData);
      #sc_10003{} ->
	  v_msg_sc_10003(Msg, [sc_10003], TrUserData);
      #sc_10000{} ->
	  v_msg_sc_10000(Msg, [sc_10000], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_cs_10004/3}).
v_msg_cs_10004(#cs_10004{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_cs_10011/3}).
v_msg_cs_10011(#cs_10011{resultData = F1}, Path, _) ->
    v_type_bytes(F1, [resultData | Path]), ok.

-dialyzer({nowarn_function,v_msg_cs_10010/3}).
v_msg_cs_10010(#cs_10010{processData = F1}, Path, _) ->
    v_type_bytes(F1, [processData | Path]), ok.

-dialyzer({nowarn_function,v_msg_cs_10000/3}).
v_msg_cs_10000(#cs_10000{openId = F1, nickname = F2,
			 avatarUrl = F3, sign = F4, timestamp = F5},
	       Path, _) ->
    v_type_string(F1, [openId | Path]),
    v_type_string(F2, [nickname | Path]),
    v_type_string(F3, [avatarUrl | Path]),
    v_type_string(F4, [sign | Path]),
    v_type_int32(F5, [timestamp | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_sc_10011/3}).
v_msg_sc_10011(#sc_10011{playerId = F1, resultData = F2,
			 seeds = F3},
	       Path, _) ->
    v_type_int64(F1, [playerId | Path]),
    v_type_bytes(F2, [resultData | Path]),
    if is_list(F3) ->
	   _ = [v_type_int32(Elem, [seeds | Path]) || Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F3,
			 [seeds | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_sc_10001/3}).
v_msg_sc_10001(#sc_10001{result = F1, roomId = F2,
			 matchId = F3},
	       Path, _) ->
    v_type_int32(F1, [result | Path]),
    v_type_int64(F2, [roomId | Path]),
    v_type_string(F3, [matchId | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_cs_10002/3}).
v_msg_cs_10002(#cs_10002{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_cs_10001/3}).
v_msg_cs_10001(#cs_10001{matchId = F1}, Path, _) ->
    v_type_string(F1, [matchId | Path]), ok.

-dialyzer({nowarn_function,v_msg_sc_10010/3}).
v_msg_sc_10010(#sc_10010{playerId = F1,
			 processData = F2},
	       Path, _) ->
    v_type_int64(F1, [playerId | Path]),
    v_type_bytes(F2, [processData | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_sc_10002/3}).
v_msg_sc_10002(#sc_10002{result = F1}, Path, _) ->
    v_type_int32(F1, [result | Path]), ok.

-dialyzer({nowarn_function,v_msg_sc_10003/3}).
v_msg_sc_10003(#sc_10003{readyTime = F1}, Path, _) ->
    v_type_int32(F1, [readyTime | Path]), ok.

-dialyzer({nowarn_function,v_msg_sc_10000/3}).
v_msg_sc_10000(#sc_10000{result = F1, playerId = F2},
	       Path, _) ->
    v_type_int32(F1, [result | Path]),
    v_type_int64(F2, [playerId | Path]),
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int64/2}).
v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, cs_10004}, []},
     {{msg, cs_10011},
      [#field{name = resultData, fnum = 2, rnum = 2,
	      type = bytes, occurrence = required, opts = []}]},
     {{msg, cs_10010},
      [#field{name = processData, fnum = 1, rnum = 2,
	      type = bytes, occurrence = required, opts = []}]},
     {{msg, cs_10000},
      [#field{name = openId, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = nickname, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = avatarUrl, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []},
       #field{name = sign, fnum = 4, rnum = 5, type = string,
	      occurrence = required, opts = []},
       #field{name = timestamp, fnum = 5, rnum = 6,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, sc_10011},
      [#field{name = playerId, fnum = 1, rnum = 2,
	      type = int64, occurrence = required, opts = []},
       #field{name = resultData, fnum = 2, rnum = 3,
	      type = bytes, occurrence = required, opts = []},
       #field{name = seeds, fnum = 3, rnum = 4, type = int32,
	      occurrence = repeated, opts = []}]},
     {{msg, sc_10001},
      [#field{name = result, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = roomId, fnum = 2, rnum = 3, type = int64,
	      occurrence = required, opts = []},
       #field{name = matchId, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []}]},
     {{msg, cs_10002}, []},
     {{msg, cs_10001},
      [#field{name = matchId, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, sc_10010},
      [#field{name = playerId, fnum = 1, rnum = 2,
	      type = int64, occurrence = required, opts = []},
       #field{name = processData, fnum = 2, rnum = 3,
	      type = bytes, occurrence = required, opts = []}]},
     {{msg, sc_10002},
      [#field{name = result, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, sc_10003},
      [#field{name = readyTime, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, sc_10000},
      [#field{name = result, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = playerId, fnum = 2, rnum = 3,
	      type = int64, occurrence = required, opts = []}]}].


get_msg_names() ->
    [cs_10004, cs_10011, cs_10010, cs_10000, sc_10011,
     sc_10001, cs_10002, cs_10001, sc_10010, sc_10002,
     sc_10003, sc_10000].


get_group_names() -> [].


get_msg_or_group_names() ->
    [cs_10004, cs_10011, cs_10010, cs_10000, sc_10011,
     sc_10001, cs_10002, cs_10001, sc_10010, sc_10002,
     sc_10003, sc_10000].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(cs_10004) -> [];
find_msg_def(cs_10011) ->
    [#field{name = resultData, fnum = 2, rnum = 2,
	    type = bytes, occurrence = required, opts = []}];
find_msg_def(cs_10010) ->
    [#field{name = processData, fnum = 1, rnum = 2,
	    type = bytes, occurrence = required, opts = []}];
find_msg_def(cs_10000) ->
    [#field{name = openId, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = nickname, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = avatarUrl, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []},
     #field{name = sign, fnum = 4, rnum = 5, type = string,
	    occurrence = required, opts = []},
     #field{name = timestamp, fnum = 5, rnum = 6,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(sc_10011) ->
    [#field{name = playerId, fnum = 1, rnum = 2,
	    type = int64, occurrence = required, opts = []},
     #field{name = resultData, fnum = 2, rnum = 3,
	    type = bytes, occurrence = required, opts = []},
     #field{name = seeds, fnum = 3, rnum = 4, type = int32,
	    occurrence = repeated, opts = []}];
find_msg_def(sc_10001) ->
    [#field{name = result, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = roomId, fnum = 2, rnum = 3, type = int64,
	    occurrence = required, opts = []},
     #field{name = matchId, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []}];
find_msg_def(cs_10002) -> [];
find_msg_def(cs_10001) ->
    [#field{name = matchId, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(sc_10010) ->
    [#field{name = playerId, fnum = 1, rnum = 2,
	    type = int64, occurrence = required, opts = []},
     #field{name = processData, fnum = 2, rnum = 3,
	    type = bytes, occurrence = required, opts = []}];
find_msg_def(sc_10002) ->
    [#field{name = result, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(sc_10003) ->
    [#field{name = readyTime, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(sc_10000) ->
    [#field{name = result, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = playerId, fnum = 2, rnum = 3,
	    type = int64, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.1.3".

gpb_version_as_list() ->
    [4,1,3].
