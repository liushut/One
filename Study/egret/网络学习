网络学习：
什么是 HTTP？
http://www.w3school.com.cn/tags/html_ref_httpmethods.asp
超文本传输协议（HTTP）的设计目的是保证客户机与服务器之间的通信。

HTTP 的工作方式是客户机与服务器之间的请求-应答协议。

web 浏览器可能是客户端，而计算机上的网络应用程序也可能作为服务器端。

举例：客户端（浏览器）向服务器提交 HTTP 请求；服务器向客户端返回响应。响应包含关于请求的状态信息以及可能被请求的内容。

两种 HTTP 请求方法：GET 和 POST
在客户机和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST。

GET - 从指定的资源请求数据。
POST - 向指定的资源提交要被处理的数据

GET一般用于获取/查询资源信息，而POST一般用于更新资源信息，
GET 仅用来获取查看信息，不能改变服务器信息。
POST 用来改变服务器信息。这里说的改变，包括增加、修改和删除。



GET 方法
请注意，查询字符串（名称/值对）是在 GET 请求的 URL 中发送的：
GET 请求可被缓存
GET 请求保留在浏览器历史记录中
GET 请求可被收藏为书签
GET 请求不应在处理敏感数据时使用
GET 请求有长度限制
GET 请求只应当用于取回数据

POST 方法
请注意，查询字符串（名称/值对）是在 POST 请求的 HTTP 消息主体中发送的：
有关 POST 请求的其他一些注释：
POST 请求不会被缓存
POST 请求不会保留在浏览器历史记录中
POST 不能被收藏为书签
POST 请求对数据长度没有要求

比较 GET 与 POST
下面的表格比较了两种 HTTP 方法：GET 和 POST。

 	GET	POST
后退按钮/刷新	   无害	       数据会被重新提交（浏览器应该告知用户数据会被重新提交）。

缓存	           能被缓存	     不能缓存

历史	     参数保留在浏览器历史中。   	参数不会保存在浏览器历史中。
对数据长度的限制	是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。	无限制。
对数据类型的限制	只允许 ASCII 字符。	没有限制。也允许二进制数据。
安全性	
与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。

在发送密码或其他敏感信息时绝不要使用 GET ！

POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。
可见性	数据在 URL 中对所有人都是可见的。	数据不会显示在 URL 中。


多人服务端：
https://blog.csdn.net/IceSun963/article/details/40823397



webSocket:
https://blog.csdn.net/Aweng_ws/article/details/79719318
1.为什么需要webSocket?
http协议有一个缺陷:通信只能由客户端发起。
2.特点：
服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。
（1）建立在 TCP 协议之上，服务器端的实现比较容易。
（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。
（3）数据格式比较轻量，性能开销小，通信高效。
（4）可以发送文本，也可以发送二进制数据。
（5）没有同源限制，客户端可以与任意服务器通信。
（6）协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。
ws://example.com:80/some/path

简单实例：
//创建 WebSocket 对象 客户端就会与服务器进行连接。
var ws = new WebSocket(url,[protocol]);
//第一个参数 url, 指定连接的 URL。第二个参数 protocol 是可选的，指定了可接受的子协议。

WebSocket对象属性：
属性：                  描述： 
Socket.readyState      只读属性 readyState 表示连接状态，可以是以下值：
						0 - 表示连接尚未建立。CONNECTING
						1 - 表示连接已建立，可以进行通信。OPEN
						2 - 表示连接正在进行关闭。CLOSING
						3 - 表示连接已经关闭或者连接不能打开。CLOSED

Socket.bufferedAmount   只读属性 bufferedAmount 已被 send()  											放入正在队列中等待传输，但是还没有发出的 UTF-8 文本字节数。

WebSocket事件：
事件:				 事件处理程序：       			描述：
open                 Socket.onopen					连接建立时触发
message				 Socket.onmessage				客户端接收服务端数据时触发
error				 Socket.onerror					通信发生错误时触发
close                Socket.onclose					连接关闭时触发


WebSocket方法：
Socket.send()         使用连接发送数据
Socket.close()        关闭连接


// 初始化一个 WebSocket 对象
var ws = new WebSocket("ws://localhost:9998/echo");
 
// 建立 web socket 连接成功触发事件
ws.onopen = function () {
  // 使用 send() 方法发送数据
  ws.send("发送数据");
  alert("数据发送中...");
};
 
// 接收服务端数据时触发事件
ws.onmessage = function (evt) {
  var received_msg = evt.data;
  alert("数据已接收...");
};
 
// 断开 web socket 连接成功触发事件
ws.onclose = function () {
  alert("连接已关闭...");
};

WebSocket 在服务端的实现非常丰富。Node.js、Java、C++、Python 等多种语言都有自己的解决方案。看公司用哪一种

HTTP 和 WebSocket 有什么关系？
Websocket 其实是一个新协议，跟 HTTP 协议基本没有关系，只是为了兼容现有浏览器的握手规范而已，也就是说它是 HTTP 协议上的一种补充。

Html 和 HTTP 有什么关系？
Html 是超文本标记语言，是一种用于创建网页的标准标记语言。它是一种技术标准。Html5 是它的最新版本。

Http 是一种网络通信协议。其本身和 Html 没有直接关系。


白鹭的webSocket:
http://developer.egret.com/cn/github/egret-docs/extension/WebSocket/WebSocket/index.html

