egret学习

常用文件：
egretProperties.json   配置第三方库文件  AssetsManager 可以代替Res模块
default.res.json       资源文件配置文件
manifest.json          项目所需的js文件在此文件中配置。
tsconfig.json          项目的配置文件，根据其中的属性来设置TS项目的编译参数



编译顺序:
在egret中，需要使用TS编写程序，最终编译成浏览器可读的JS。
浏览器根据<script>标签中的载入顺序来执行脚本，当某个脚本引用了一个为载入的
脚本变量时候，浏览器将报出相应错误。
一般情况下，在 Egret 项目中并不需要手动处理编译顺序，因为egret编译器已经帮助开发者处理好了。但是有一种情况是编译器不能处理的，需要手动加上 <reference> 标签来告诉编译器 项目中类的依赖关系。

自定义插件：
开发者在 build 和 publish 的时候可以执行自定义插件，在项目构建时会执行 config.ts 文件中的 buildConfig 函数，这个函数的功能是返回一个对象，对象中的内容会根据执行不同的命令返回相对应的输出路径和需要执行的插件，插件在返回对象的 commands 数组中实例化后就会执行。

扩展的插件要实现 plugins.Command 接口

遮罩的作用是指定一个显示对象的可见区域，所有显示对象都具备遮罩功能。


是的，还可以写Shader.




性能优化：https://www.cnblogs.com/woshi09/p/8034639.html
http://edn.egret.com/cn/article/index/id/287
WebAssembly:是一个新的低级别的二进制的编译格式，并且能够运行在现有的网络
环境当中。

egret RunTime:大幅强化h5游戏体验而开发的加速器组件。


this.stage ： 显示对象的舞台，例如，您可以创建多个显示对象并加载到显示列表中，每个显示对象的 stage 属性是指向相同的 Stage 对象。如果显示对象未添加到显示列表，则此显示对象的 this.stage 属性会设置为 null。
 MainContext是游戏的核心跨平台接口，组合了多个功能Context，并是游戏启动的主入口



舞台  Stage 容器 父节点1
文档类 Main 容器  父节点2
自定义显示对象或者容器 3  继承DisplayObjectContainer类。

addChild() 默认x,y为0.并不是默认添加到锚点所在位置。
容器.numChildren   子对象数量
深度值从0开始。addChildAt()  
访问容器子对象:
容器.getChildAt(深度值)。通过深度值获取子对象   推荐此种。
容器.getChildByName( "" );通过名字获取子对象


显示对象:1.显示对象容器
         2.单纯的显示对象，除自身以外不能包括其他显示对象，简称“非容器对象”。
显示对象的坐标系是相对坐标系，相对于父节点，而非绝对坐标系。
每一个Egret都会拥有一个文档类，这个文档类必须是一个显示对象容器.


“显示对象”，是可以在舞台上显示的对象。可以显示的对象，既包括可以直接看见的图形、文字、视频、图片等，也包括不能看见但真实存在的显示对象容器。在Egret中，视觉图形都是由显示对象和显示对象容器组成的。

官方文档中的显示对象内容:
核心显示类
不同的内容对应不同的显示对象，Egret 中一共封装了8个显示相关的核心类，如下表。

类	描述
DisplayObject	显示对象基类，所有显示对象均继承自此类
Bitmap	位图，用来显示图片
Shape	用来显示矢量图，可以使用其中的方法绘制矢量图形
TextField	文本类
BitmapText	位图文本类
DisplayObjectContainer	显示对象容器接口，所有显示对象容器均实现此接口
Sprite	带有矢量绘制功能的显示容器
Stage	舞台类

舞台的坐标系从左上角开始，这是一个非常简单的笛卡尔坐标系。
横轴使用X表示，越向右，X值越大。

纵轴使用Y表示，越向下，Y值越大。

自定义显示对象类，自定义有什么操作，可以显示。这个对象类是没有addchild的，那是容器才有的操作。需要继承自 DisplayObject的具体子类，例如Shape或者TextField。

，如果对位图进行缩放或拉伸，图像会发生模糊，所以可以用九宫格。
所有的显示容器全部继承自 DisplayObjectContainer 类，该类继承自 DisplayObject 。也就是说，在Egret中，所有的容器都继承自 DisplayObject。
在Egret中,DisplayObjectContainer 封装了一些显示列表中常用的功能，将在后面文档中详细介绍。这些常用操作主要分为四类：
添加、删除子对象  addchild  removeChild   继承了DisplayObjectContainer才有
访问子对象
检测子对象
设置叠放次序

继承 DisplayObjectContainer 。如果要同时实现Graphics绘图功能，可继承 Sprite。

帧数是每秒的帧数。 1s = 30  1s = 60帧
startTick（停止对应stopTick）全局函数将以 60 帧速率回调函数。它与 ENTER_FRAME 事件不同。ENTER_FRAME 是每帧回调，改变帧率会改变回调速度；startTick是定时回调，改变帧率也不会影响回调速度。固定以60帧，每帧回调。

ctrl + O 快速定位到某个方法

 缓动是由一系列中间状态按顺序变化形成的，每一个中间状态可以产生一个更新事
 *      件，便于完成更丰富的功能，在Tween.get()的第二个参数，即属性集
 *      合参数中可以定义更新事件。属性集合是一个键值对集合，将更新事件分配给on
 *      Change键即可，如事件有其作用域要求，可以同时将作用域引用分配给on
 *      ChangeObj键。

 更新事件就是在动画过程中实时进行处理的事件，比如到达目的点这段时间内发生什么，做什么处理，都在更新事件中处理。

几个关键的文件:要熟悉
egret.d.ts  //egret核心库
lib.es5.d.ts//typescript自带的。
tween.d.ts  //tween库
eui.d.ts  //eui库
相当于每个库的头文件

要先addchild   在removechild


 新动画开始的时候要把旧动画清除。

 我写了函数放在动画后面，但是先输出这个函数，动画在最后，所以要实时在函数更新动画对象的xy值,或者直接在动画中运用，要想拿到动画中的xy值必须借助别的变量。

 缓动动画的动画方程自己也可以写,Ease.quadIn等，其实也是一个函数，注意开源，有什么就看源码。
 步骤：
1.tween.d.ts  static quadIn:(t:number)=>number;//代表是一个函数类型的声明。
2.tween.js   Ease.quadIn = Ease.getPowIn(2);
3.tween.d.ts  static getPowIn(pow:number)=>number;
4.tween.js Ease.getPowIn = function(pow){return function(t){return Math.pow(t,pow)}};
动画时间与缓动算法是分开的，互不打扰的。动画持续时间内运行缓动算法。
private  myT:(t: number) => number = this.acceleRator(3);//返回一个函数，调用myT的时候才调用闭包函数。
	private acceleRator(pow:number)
	{
		 return function (t) {//这个应该是默认会调用的
			 console.log(t);//0 - 1的一个值
                return t/9；//返回的是缓动算法的步长。
            };
egret.Tween.get(动画对象, { onChange: 动画过程中实时变化函数, onChangeObj: 变化函数作用域 })
			.to({ y: this.bgAll.y - this.blank / 2 }, 动画时间,缓动算法函数)//quartIn   this.myT
			.call(() => {
				//回掉方法
			}, 回掉方法作用域)   

对象之间的 = 相当于是引用传递。

自己写的算法只需要写一个(t:number)=>number 类型的函数就OK。
里面写自己的算法。参数t是引擎自动调用的。


exml的属性类大小，就是这个对应类的大小。a.skinName = xxx.exml.
exml的属性大小就是a这个类的属性大小。一个皮肤始终对应的是一个类。
图片只是类的一个属性。


自定义组件和类继承：
自定义的类如果继承了eui.component ，则可以变成自定义组件。然后在自定义组件中写方法。
自定义组件之后可以拖动到exml里面，但是也要有对应皮肤才会显示，exml的类名就是皮肤名字
自定义组件需要指定皮肤，才会显示正确，不然什么都显示不了，只是一个组件类。
自定义组件负责数据，皮肤负责界面。
相当于this.skinName = "xxx.exml"; 但是这样做有缺点：
 //这里没有做成属性的原因是因为当应用到eui的时候，Skin还未指定，运行时候会出现报错，如果指定了SkinName，那么就会产生两次eui的构建浪费内存。
 我想到的是: this.skinName是代码运行才能产生效果，而直接指定皮肤是可以在界面上拖动，直接做效果的

类和皮肤指定后，类定义变量的名字与skin中UI的ID对应，则可以利用代码得到UI组件从而控制他们。
或者不需要控制的时候，不必this.skinName指定。
尽量一个类及其子类用一个皮肤。

this.skinName是在代码端用皮肤，直接指定皮肤是在UI端使用，拼UI。

对比Buttom什么的一样，就是一个组件，要用到的时候才用代码取得控制权。Buttom也有对应的UI界面
自定义组件可以自己定义自己的方法与逻辑，就是一个类。然后这个类加上皮肤就是组件。然后可以在UI里面用。得到他的实例，然后写逻辑，做交互都可以。

Image等组件属性:
http://developer.egret.com/cn/github/egret-docs/extension/EUI/autoLayout/layoutDebug/index.html

explicitWidth，explicitHeight：显式设置的宽高值。默认情况下这两个值是NaN。当显式调用width或height的setter方法赋值时，就会同时对这两个值赋值。width/height的值不一定会是显示设置的值。如果设置了布局属性（top+bottom等），就会导致width/height被父级设置成其他值（父级布局尺寸的优先级高于显式设置尺寸）。所以这两个属性的作用就是保存显式设置的值。调试的时候也可以根据这个判断，是否被显式设置了尺寸，还是父级强制布局的。

width,height：这两个属性储存组件经过各种布局计算后得到的最终的尺寸值。width和height的取值规则：如果没有显式设置它们，就会根据测量的值赋值到它们上，显式设置了，就以显式设置的值为准，但是如果同时设置top+bottom或percentHeight这种布局属性的值，就会以布局属性为准。总结下优先级顺序是：布局设置的值 > 显式设置的值 > 测量的值。

开发者只需要创建一个 Scroller 的实例，设置位置和尺寸，然后把需要”滚动”的容器(Group上可以有图片等)，设置到 Scroller 的 viewport 属性上。
       //创建一个容器，里面包含一张图片
        var group = new eui.Group();
        var img = new eui.Image("resource/bg.jpg");
        group.addChild(img);
        //创建一个Scroller
        var myScroller = new eui.Scroller();
        //注意位置和尺寸的设置是在Scroller上面，而不是容器上面
        myScroller.width = 200;
        myScroller.height = 200;
        //设置viewport
        myScroller.viewport = group;
        this.addChild(myScroller);

currentTarget:当前使用事件侦听的对象。
a.addeventlisner()   currentTarget就是a.




EXML中组件中创建的成员都放在childrenCreated()方法中。
Button上定义了一个labelDisplay的公开变量，ButtonSkin里也有一个id为labelDisplay的Label节点，在皮肤附加到逻辑组件上时，会自动匹配双方的同名变量和id，这些同名变量就叫做“皮肤部件”(SkinPart)
所有可定制皮肤的组件都定义了各自不同的皮肤部件。当为某个组件定制皮肤时，实际上分为创建对应的皮肤部件和显示图片素材两部分。如果只添加了图片素材，而没有声明并实例化对应变量名的皮肤部件，逻辑组件将无法正常工作。具体皮肤部件名请参考每个组件定义的public公开变量列表。

总的来说就是有两种方式：
1.UI拼好，代码获取，可以写方法。重点在代码端
2.代码指定继承的自定义组件，UI得到这个组件来拼界面。这个组件就有自己的图形和方法。重点在UI端,然后代码可以继续获取得到这个自定义组件去完成别的事情。


EXML中UI拖动好了就确定好了父子节点关系，坐标系也确定了
不再同一个(父节点)层中是不能做交互的。
继承的方式可以扩展自定义组件。

所有的可定制皮肤组件都必须继承自eui.Component或它的子类，Component的每个子类都封装了一定的功能，写自定义组件时根据需求选择不同的组件继承即可。
每个组件都有一个childrenCreated()方法，它会在组件初始化完成后回调，子类通常覆盖这个方法来访问一些延迟实例化的子项。
Button上定义了一个labelDisplay的公开变量，ButtonSkin里也有一个id为labelDisplay的Label节点，在皮肤附加到逻辑组件上时，会自动匹配双方的同名变量和id，这些同名变量就叫做“皮肤部件”(SkinPart)，
所有可定制皮肤的组件都定义了各自不同的皮肤部件。当为某个组件定制皮肤时，实际上分为创建对应的皮肤部件和显示图片素材两部分。如果只添加了图片素材，而没有声明并实例化对应变量名的皮肤部件，逻辑组件将无法正常工作。具体皮肤部件名请参考每个组件定义的public公开变量列表。

NULL和0的值都是一样的，但是为了目的和用途及容易识别的原因，NULL用于指针和对象，0用于数值。对于字符串的结尾，使用'\0'，它的值也是0，但是让人一看就知道这是字符串的结尾，不是指针，也不是普通的数值。   
 “” ：分配了内存，分配了一个空间
NULL：未分配内存





位图：由像素一点一点的小点来描述图像，缩放会失真，所以要用九宫格。BitMap()
九宫格就是为了使图像拉伸不变形。
矢量图(图片):缩放不失真，用元素形状以及颜色算法来计算。对应算法不变。 Graphics


自定义事件：1.自定义事件类，继承egret.event。
2.发送事件，侦听 3.移除事件侦听。
只有事件的发送者才可以注册侦听器，事件的发送者必须是 EventDispatcher 类或其子类的实例
建立侦听就是写回调函数，该函数必须有一个 Event 类实例或其子类的实例参数， 同时，侦听器的返回值必须为空（void参数)
注册侦听器就是addevevtlistner();

定义了私有变量，在函数中尽量用一个临时变量获得引用。
把各种方法封装好，主逻辑只出现玩法。
局部变量访问速度快，类成员变量在堆区，类实例在栈区
类的成员变量只有在类实例化后在堆中开辟内存，其引用可以置于一个局部变量提供高速访问
局部变量脱离作用域，对应栈内存马上释放。
static静态区
函数的地址在代码区，不占用对象内存。

 成员变量和局部变量的区别?
        A:在类中的位置不同
            成员变量：在类中方法外
            局部变量：在方法定义中或者方法声明上
        B:在内存中的位置不同
            成员变量：在堆内存 可以定义一个局部变量得到它在栈上的一个引用，速度快
            局部变量：在栈内存
        C:生命周期不同
            成员变量：随着对象的创建而存在，随着对象的消失而消失
            局部变量：随着方法的调用而存在，随着方法的调用完毕而消失
        D:初始化值不同
            成员变量：有默认初始化值
            局部变量：没有默认初始化值，必须定义，赋值，然后才能使用。
            
        注意事项：
            局部变量名称可以和成员变量名称一样，在方法中使用的时候，采用的是就近原则。


一定要确保资源先加载进来了。
构造函数在类成员变量初始化之后。获取资源要在RES加载完之后，如果有RES的不能直接在
成员变量初始化的时候new给默认值，RES得不到资源报错。
1.最先初始化静态成员 2.一般成员  3.构造函数。
成员变量只声明而没有初始化会有默认值，值类型为0，引用类型为undefined。记得要new，不然会报错。

如果成员变量为初始化，可以在函数中先创建局部变量创建一个然后把引用赋值给成员变量。

let a = new B();  //如果只有new B(),则只有堆上占用了内存，现在堆，栈都占有内存。
a就是b类实例的一个对象引用，是在栈上创建的。a的本质是B对象实例的地址。
B中有方法C(): let d = this.b   则d也是成员变量的一个引用，也是在栈上。
如果成员变量是值类型，消耗可以忽略。可以直接用。
当所有引用消失则回收new的内存。
成员变量的数据存储于堆中该成员变量所属的对象里面。成员变量跟随类实例共生存。
堆内存中存放的变量都会进行默认初始化，而栈内存中存放的变量却不会。
用堆进行数据的存储分配和清理，需要花费更多的时间。所以用一个速度更快
的栈上的临时变量来进行高速存储。
栈内存存放对象引用和基本数据类型，堆存储对象实例。

重要的类：
disobjectcontainer
event
touchevent
timer
bitmap
image


如果在变化函数做其他动画或者骚操作时候，一定要记得先停止目前的动画。
动画完毕之后就可以做下一个。完毕后是不要做处理的。
	

连续动画中的属性变化并不是连续的。一个动画完毕后属性是指定的值。
to ( props :any, duration ? :number, ease :Function )
将指定对象的属性修改为指定值    定值
a.to({rotation:90}).to({rotation:10})//不是等于100，而是先转到90在转到10.

wait ( duration :number, passive ? :boolean ):egret.Tween
等待指定毫秒后执行下一个动画
	
call ( callback :Function, thisObj :any, params :any[] ):egret.Tween
执行回调函数


父节点移动则子节点肯定跟随一起移动。


使用具名函数监听。js无法移除匿名函数的监听。


请问addEventListener之后，忘了removeEventListener，会内存泄露吗？
1、如果你的对象回收掉，就不会占用内存。
2、想要你的对象回收掉，只需要将对象从舞台移除即可。
尽量把不用的或者用一次的侦听器移除掉。
Event.ENTER_FRAME 和 Event.RENDER.
因为在引擎内部的实现中，对这两个事件做了特殊处理，将监听这两个事件的显示对象添加到了一个全局表中， 所以如果该事件没取消监听， 就会一直有一个全局的引用， 会造成内存泄漏。


运用to({},100).call(()=>{})这种方式可以实现等待100ms后在执行相应函数。

可以用数组存储，也可以用其余类的对象存储，本质是键值对。
Object类型，就算本来是空的，有了索引后便有值了。
let a = new Object() 或者 let a = {};
a.b = "",//既是声明又是定义，以后在用到这个索引便能直接得到值。
a.c = 1.
a.d = function(){}

后一种方式可以直接写 let a = {b = "",c = 1,d = function(){}},简化。
这种方式作为函数参数的写法最好。


